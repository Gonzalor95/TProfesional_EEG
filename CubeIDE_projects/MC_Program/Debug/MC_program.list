
MC_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007714  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007904  08007904  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800790c  0800790c  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce4  20000108  08007a1c  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dec  08007a1c  00021dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011223  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e88  00000000  00000000  0003135b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00034f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018855  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145a  00000000  00000000  0004e485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891f2  00000000  00000000  0005f8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000e8b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000108 	.word	0x20000108
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007894 	.word	0x08007894

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000010c 	.word	0x2000010c
 80001d4:	08007894 	.word	0x08007894

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init_dac_handler>:
 */

#include <EEG_simulation.h>

void init_dac_handler(const DAC_Tag dac_tag, const SPI_HandleTypeDef *hspi, const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, DAC_Handler *dac_handler)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	4613      	mov	r3, r2
 80004ee:	81bb      	strh	r3, [r7, #12]
	dac_handler->dac_tag = dac_tag;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	7bfa      	ldrb	r2, [r7, #15]
 80004f4:	701a      	strb	r2, [r3, #0]
	dac_handler->dac_hspi = hspi;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	605a      	str	r2, [r3, #4]
	dac_handler->dac_SS_GPIO_port = GPIOx;
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]
	dac_handler->dac_ss_GPIO_pin = GPIO_Pin;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	89ba      	ldrh	r2, [r7, #12]
 8000506:	819a      	strh	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <reset_dacs_config>:

void reset_dacs_config(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	e010      	b.n	8000546 <reset_dacs_config+0x32>
	{
		uint16_t word = DAC_CONFIG_RESET_DATA_AND_CONTROL;
 8000524:	230f      	movs	r3, #15
 8000526:	817b      	strh	r3, [r7, #10]

		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	441a      	add	r2, r3
 8000530:	897b      	ldrh	r3, [r7, #10]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f8f5 	bl	8000724 <_send_word_to_dac>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d109      	bne.n	8000554 <reset_dacs_config+0x40>
	for (int i = 0; i < (*dacs_count); i++)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	461a      	mov	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4293      	cmp	r3, r2
 8000550:	dbe8      	blt.n	8000524 <reset_dacs_config+0x10>
		{
			break;
		}
	}
}
 8000552:	e000      	b.n	8000556 <reset_dacs_config+0x42>
			break;
 8000554:	bf00      	nop
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <init_LDAC_in_dacs>:

void init_LDAC_in_dacs(const DAC_Handler list_of_dacs[], const uint8_t *dacs_count)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < (*dacs_count); i++)
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e011      	b.n	8000592 <init_LDAC_in_dacs+0x34>
	{
		uint16_t word = DAC_CONFIG_LDAC_HIGH;
 800056e:	f24a 0301 	movw	r3, #40961	; 0xa001
 8000572:	817b      	strh	r3, [r7, #10]
		if (_send_word_to_dac(word, &(list_of_dacs[i])) != HAL_OK)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	441a      	add	r2, r3
 800057c:	897b      	ldrh	r3, [r7, #10]
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f8cf 	bl	8000724 <_send_word_to_dac>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d109      	bne.n	80005a0 <init_LDAC_in_dacs+0x42>
	for (int i = 0; i < (*dacs_count); i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4293      	cmp	r3, r2
 800059c:	dbe7      	blt.n	800056e <init_LDAC_in_dacs+0x10>
		{
			break;
		}
	}
}
 800059e:	e000      	b.n	80005a2 <init_LDAC_in_dacs+0x44>
			break;
 80005a0:	bf00      	nop
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <init_LDAC>:

void init_LDAC(const GPIO_TypeDef *GPIOx, const uint16_t GPIO_Pin, LDAC_Handler *LDAC)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	460b      	mov	r3, r1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	817b      	strh	r3, [r7, #10]
	LDAC->GPIO_LDAC_control_port = GPIOx;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]
	LDAC->GPIO_LDAC_control_pin = GPIO_Pin;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	897a      	ldrh	r2, [r7, #10]
 80005c2:	809a      	strh	r2, [r3, #4]

	// Initialize LDAC with fixed state
	HAL_GPIO_WritePin(LDAC->GPIO_LDAC_control_port, LDAC->GPIO_LDAC_control_pin, GPIO_PIN_SET);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	889b      	ldrh	r3, [r3, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 fefc 	bl	80013cc <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <parse_config>:

uint16_t parse_config(const uint8_t *bufferUSB)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	return ((uint16_t)bufferUSB[0] << 8) | ((uint16_t)bufferUSB[1]);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	b29b      	uxth	r3, r3
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <parse_tag_and_channel_from_config>:

void parse_tag_and_channel_from_config(const uint16_t *config, DAC_Tag *DAC_tag, DAC_Channel *DAC_channel)
{
 8000606:	b480      	push	{r7}
 8000608:	b085      	sub	sp, #20
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
	// config / 8 = {0,1,2,3} -> which corresponds to one DAC, so we use the enum defined in DAC_Tag for correlation
	*DAC_tag = (*config) / 8;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	08db      	lsrs	r3, r3, #3
 8000618:	b29b      	uxth	r3, r3
 800061a:	b2da      	uxtb	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	701a      	strb	r2, [r3, #0]
	// config % 8 = {0,1,2,3,4,5,6,7} -> which corresponds to a DAC channel, so we use the enum defined in DAC_Channel for correlation.
	*DAC_channel = (*config) % 8;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	701a      	strb	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <send_data_to_dac_channel>:

HAL_StatusTypeDef send_data_to_dac_channel(const DAC_Handler *dac_handler, const DAC_Channel *dac_channel, const uint8_t *bufferUSB)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	/* Where:
	 * 0 = MSB (izquierda de todo) en cero para tener el "modo escritura"
	 * AAA = Address (de 0 a 8)
	 * D...D = datos
	 */
	HAL_StatusTypeDef status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	75fb      	strb	r3, [r7, #23]
	uint8_t dataToDAC[2];
	uint8_t channel_addr_mask = get_dac_channel_addr_mask(dac_channel);
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f000 f833 	bl	80006b8 <get_dac_channel_addr_mask>
 8000652:	4603      	mov	r3, r0
 8000654:	75bb      	strb	r3, [r7, #22]

	// Copy data
	dataToDAC[0] = bufferUSB[0];
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	753b      	strb	r3, [r7, #20]
	dataToDAC[1] = bufferUSB[1];
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	757b      	strb	r3, [r7, #21]

	// Clear first 4 bits
	dataToDAC[1] = dataToDAC[1] & 0xF;
 8000662:	7d7b      	ldrb	r3, [r7, #21]
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	b2db      	uxtb	r3, r3
 800066a:	757b      	strb	r3, [r7, #21]
	// Apply channel_addr_mask: 0b 0AAA-0000
	dataToDAC[1] = dataToDAC[1] | channel_addr_mask;
 800066c:	7d7a      	ldrb	r2, [r7, #21]
 800066e:	7dbb      	ldrb	r3, [r7, #22]
 8000670:	4313      	orrs	r3, r2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	757b      	strb	r3, [r7, #21]

	// GPIO_Write sirve para avisar al DAC que le estamos escribiendo
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6898      	ldr	r0, [r3, #8]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	899b      	ldrh	r3, [r3, #12]
 800067e:	2200      	movs	r2, #0
 8000680:	4619      	mov	r1, r3
 8000682:	f000 fea3 	bl	80013cc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, sizeof(dataToDAC), HAL_MAX_DELAY);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6858      	ldr	r0, [r3, #4]
 800068a:	f107 0114 	add.w	r1, r7, #20
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	2202      	movs	r2, #2
 8000694:	f002 fde9 	bl	800326a <HAL_SPI_Transmit>
 8000698:	4603      	mov	r3, r0
 800069a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6898      	ldr	r0, [r3, #8]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	899b      	ldrh	r3, [r3, #12]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4619      	mov	r1, r3
 80006a8:	f000 fe90 	bl	80013cc <HAL_GPIO_WritePin>

	return status;
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <get_dac_channel_addr_mask>:
	0x40,
	0x50,
	0x60,
	0x70};
uint8_t get_dac_channel_addr_mask(const DAC_Channel *dac_channel)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	return DAC_Channel_Masks[*dac_channel];
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <get_dac_channel_addr_mask+0x20>)
 80006c8:	5c9b      	ldrb	r3, [r3, r2]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000

080006dc <send_configuration_to_dacs>:

HAL_StatusTypeDef send_configuration_to_dacs(const uint16_t *config, const DAC_Handler *list_of_dacs[], const uint8_t *dacs_count)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
	if (config == CONF_LDAC_TRIGGER)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b21      	cmp	r3, #33	; 0x21
 80006f0:	d103      	bne.n	80006fa <send_configuration_to_dacs+0x1e>
	{
		trigger_LDAC();
 80006f2:	f000 f807 	bl	8000704 <trigger_LDAC>
		return status;
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	e000      	b.n	80006fc <send_configuration_to_dacs+0x20>
	}
	else if (config == CONF_LDAC_LOW)
	{
		// TODO: Complete with other configs
	}
	return status;
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <trigger_LDAC>:

void trigger_LDAC()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	// To trigger LDAC. Every pin 1 (LDAC) of the DACs must be set to low to update all channels at once
	// LDAC_settings variable is declared as extern outside
	// Setting LDAC Pin to 0 (zero/low)
	//  TODO: hardcode until figure extern problem HAL_GPIO_WritePin(LDAC_settings.GPIO_LDAC_control_port, LDAC_settings.GPIO_LDAC_control_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2104      	movs	r1, #4
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <trigger_LDAC+0x1c>)
 800070e:	f000 fe5d 	bl	80013cc <HAL_GPIO_WritePin>
	// Setting LDAC Pin to 1 (one/high)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2104      	movs	r1, #4
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <trigger_LDAC+0x1c>)
 8000718:	f000 fe58 	bl	80013cc <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020400 	.word	0x40020400

08000724 <_send_word_to_dac>:

HAL_StatusTypeDef _send_word_to_dac(uint16_t word, DAC_Handler *dac_handler)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t dataToDAC[2];

	dataToDAC[0] = (uint8_t)word;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	733b      	strb	r3, [r7, #12]
	dataToDAC[1] = (uint8_t)(word >> 8);
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_RESET);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	6898      	ldr	r0, [r3, #8]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	899b      	ldrh	r3, [r3, #12]
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	f000 fe3e 	bl	80013cc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dac_handler->dac_hspi, dataToDAC, (uint16_t)sizeof(dataToDAC), HAL_MAX_DELAY);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	6858      	ldr	r0, [r3, #4]
 8000754:	f107 010c 	add.w	r1, r7, #12
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	2202      	movs	r2, #2
 800075e:	f002 fd84 	bl	800326a <HAL_SPI_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(dac_handler->dac_SS_GPIO_port, dac_handler->dac_ss_GPIO_pin, GPIO_PIN_SET);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	6898      	ldr	r0, [r3, #8]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	899b      	ldrh	r3, [r3, #12]
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f000 fe2b 	bl	80013cc <HAL_GPIO_WritePin>
	return status;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b09b      	sub	sp, #108	; 0x6c
 8000784:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 faf5 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f869 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f93f 	bl	8000a10 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000792:	f000 f8cd 	bl	8000930 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000796:	f006 fb3f 	bl	8006e18 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 800079a:	f000 f901 	bl	80009a0 <MX_SPI5_Init>
  DAC_Handler dac_handler_B;
  DAC_Handler dac_handler_C;
  DAC_Handler dac_handler_D;
  // TODO: Un-comment this when DACs are soldered
  // init_dac_handler(DAC_A, &hspi1, GPIOA, GPIO_PIN_4, &dac_handler_A);
  init_dac_handler(DAC_B, &hspi5, GPIOB, GPIO_PIN_1, &dac_handler_B);
 800079e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2302      	movs	r3, #2
 80007a6:	4a29      	ldr	r2, [pc, #164]	; (800084c <main+0xcc>)
 80007a8:	4929      	ldr	r1, [pc, #164]	; (8000850 <main+0xd0>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fe96 	bl	80004dc <init_dac_handler>
  // init_dac_handler(DAC_C, &hspiX, GPIOX, GPIO_PIN_X, &dac_handler_C);
  // init_dac_handler(DAC_D, &hspiX, GPIOX, GPIO_PIN_X, &dac_handler_D);
  DAC_Handler list_of_dacs[] = {dac_handler_B}; // TODO: Add DAC_A, DAC_C and DAC_D
 80007b0:	f107 0410 	add.w	r4, r7, #16
 80007b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  static uint8_t dacs_count = sizeof(list_of_dacs) / sizeof(list_of_dacs[0]);
  reset_dacs_config(list_of_dacs, &dacs_count);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4924      	ldr	r1, [pc, #144]	; (8000854 <main+0xd4>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fea5 	bl	8000514 <reset_dacs_config>
  init_LDAC_in_dacs(list_of_dacs, &dacs_count);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4921      	ldr	r1, [pc, #132]	; (8000854 <main+0xd4>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fec4 	bl	800055e <init_LDAC_in_dacs>

  // LDAC configuration
  LDAC_Handler LDAC;
  init_LDAC(GPIOB, GPIO_PIN_2, &LDAC);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	461a      	mov	r2, r3
 80007dc:	2104      	movs	r1, #4
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <main+0xcc>)
 80007e0:	f7ff fee3 	bl	80005aa <init_LDAC>

  // Variables and initial config
  DAC_Channel DAC_channel = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	71fb      	strb	r3, [r7, #7]
  DAC_Tag DAC_tag = DAC_B;
 80007e8:	2301      	movs	r3, #1
 80007ea:	71bb      	strb	r3, [r7, #6]
 80007ec:	2300      	movs	r3, #0
 80007ee:	681b      	ldr	r3, [r3, #0]
  memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <main+0xd8>)
 80007f2:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (bufferSet == 1)
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0xdc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d1fb      	bne.n	80007f4 <main+0x74>
    {
      uint16_t config = parse_config(receiveBuffer);
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <main+0xd8>)
 80007fe:	f7ff feed 	bl	80005dc <parse_config>
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
      // A config value of [0, 31] means writing to a DAC
      if (config < MAX_DAC_CHANNEL_WORD)
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	d810      	bhi.n	800082e <main+0xae>
      {
        parse_tag_and_channel_from_config(&config, &DAC_tag, &DAC_channel);
 800080c:	1dfa      	adds	r2, r7, #7
 800080e:	1db9      	adds	r1, r7, #6
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fef7 	bl	8000606 <parse_tag_and_channel_from_config>
        // Send the data to the corresponding channel of the corresponding DAC
        send_data_to_dac_channel(&(list_of_dacs[DAC_tag]), &DAC_channel, receiveBuffer);
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	f107 0210 	add.w	r2, r7, #16
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	4413      	add	r3, r2
 8000822:	1df9      	adds	r1, r7, #7
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <main+0xd8>)
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff08 	bl	800063c <send_data_to_dac_channel>
 800082c:	e006      	b.n	800083c <main+0xbc>
      }
      else
      {
        // A config value > 31 means a device configuration
        send_configuration_to_dacs(&config, &list_of_dacs, &dacs_count);
 800082e:	f107 0110 	add.w	r1, r7, #16
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <main+0xd4>)
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff50 	bl	80006dc <send_configuration_to_dacs>
 800083c:	2300      	movs	r3, #0
 800083e:	681b      	ldr	r3, [r3, #0]
      }
      memcpy(receiveBuffer, '\0', BUFFER_SIZE);
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <main+0xd8>)
 8000842:	6013      	str	r3, [r2, #0]
      bufferSet = 0;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <main+0xdc>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    if (bufferSet == 1)
 800084a:	e7d3      	b.n	80007f4 <main+0x74>
 800084c:	40020400 	.word	0x40020400
 8000850:	2000017c 	.word	0x2000017c
 8000854:	20000008 	.word	0x20000008
 8000858:	200001d4 	.word	0x200001d4
 800085c:	200001d8 	.word	0x200001d8

08000860 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	; 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f007 f808 	bl	8007884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <SystemClock_Config+0xc8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <SystemClock_Config+0xc8>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <SystemClock_Config+0xc8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <SystemClock_Config+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a20      	ldr	r2, [pc, #128]	; (800092c <SystemClock_Config+0xcc>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <SystemClock_Config+0xcc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008d0:	230f      	movs	r3, #15
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008d4:	2390      	movs	r3, #144	; 0x90
 80008d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d8:	2304      	movs	r3, #4
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008dc:	2305      	movs	r3, #5
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f807 	bl	80028f8 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f0:	f000 f906 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2101      	movs	r1, #1
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fa69 	bl	8002de8 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800091c:	f000 f8f0 	bl	8000b00 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3750      	adds	r7, #80	; 0x50
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_SPI1_Init+0x68>)
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <MX_SPI1_Init+0x6c>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI1_Init+0x68>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_SPI1_Init+0x68>)
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_SPI1_Init+0x68>)
 800094c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI1_Init+0x68>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI1_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_SPI1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_SPI1_Init+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI1_Init+0x68>)
 8000980:	220a      	movs	r2, #10
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_SPI1_Init+0x68>)
 8000986:	f002 fbe7 	bl	8003158 <HAL_SPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000990:	f000 f8b6 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000124 	.word	0x20000124
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <MX_SPI5_Init+0x6c>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b8:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009f6:	f002 fbaf 	bl	8003158 <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI5_Init+0x64>
  {
    Error_Handler();
 8000a00:	f000 f87e 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000017c 	.word	0x2000017c
 8000a0c:	40015000 	.word	0x40015000

08000a10 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a31      	ldr	r2, [pc, #196]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_GPIO_Init+0xe4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MX_GPIO_Init+0xe8>)
 8000a9c:	f000 fc96 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4815      	ldr	r0, [pc, #84]	; (8000afc <MX_GPIO_Init+0xec>)
 8000aa6:	f000 fc91 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2104      	movs	r1, #4
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0xec>)
 8000ab0:	f000 fc8c 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_GPIO_Init+0xe8>)
 8000acc:	f000 fafa 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0xec>)
 8000ae8:	f000 faec 	bl	80010c4 <HAL_GPIO_Init>
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400

08000b00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a41      	ldr	r2, [pc, #260]	; (8000c80 <HAL_SPI_MspInit+0x124>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12c      	bne.n	8000bd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	4a3f      	ldr	r2, [pc, #252]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	482d      	ldr	r0, [pc, #180]	; (8000c88 <HAL_SPI_MspInit+0x12c>)
 8000bd2:	f000 fa77 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000bd6:	e04f      	b.n	8000c78 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI5)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <HAL_SPI_MspInit+0x130>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d14a      	bne.n	8000c78 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_SPI_MspInit+0x128>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c46:	2306      	movs	r3, #6
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <HAL_SPI_MspInit+0x134>)
 8000c52:	f000 fa37 	bl	80010c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x12c>)
 8000c74:	f000 fa26 	bl	80010c4 <HAL_GPIO_Init>
}
 8000c78:	bf00      	nop
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40015000 	.word	0x40015000
 8000c90:	40020400 	.word	0x40020400

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f89a 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f000 fcd6 	bl	800169e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200016c0 	.word	0x200016c0

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f006 fd67 	bl	8007820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fd15 	bl	8000780 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000d64:	08007914 	.word	0x08007914
  ldr r2, =_sbss
 8000d68:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000d6c:	20001dec 	.word	0x20001dec

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f94f 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff feb0 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f967 	bl	80010aa <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f92f 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000014 	.word	0x20000014
 8000e14:	20000010 	.word	0x20000010

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000014 	.word	0x20000014
 8000e3c:	200001dc 	.word	0x200001dc

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001dc 	.word	0x200001dc

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000014 	.word	0x20000014

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e159      	b.n	8001394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8148 	bne.w	800138e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d005      	beq.n	8001116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	2b02      	cmp	r3, #2
 8001114:	d130      	bne.n	8001178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 0201 	and.w	r2, r3, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b03      	cmp	r3, #3
 8001182:	d017      	beq.n	80011b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69b9      	ldr	r1, [r7, #24]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a2 	beq.w	800138e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b54      	ldr	r3, [pc, #336]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a49      	ldr	r2, [pc, #292]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x202>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a48      	ldr	r2, [pc, #288]	; (80013b8 <HAL_GPIO_Init+0x2f4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x1fe>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_GPIO_Init+0x2f8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x1fa>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <HAL_GPIO_Init+0x2fc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x1f6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a45      	ldr	r2, [pc, #276]	; (80013c4 <HAL_GPIO_Init+0x300>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x1f2>
 80012b2:	2304      	movs	r3, #4
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <HAL_GPIO_Init+0x304>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <HAL_GPIO_Init+0x304>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x304>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <HAL_GPIO_Init+0x304>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x304>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_GPIO_Init+0x304>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_GPIO_Init+0x304>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_GPIO_Init+0x304>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f aea2 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001400:	b08f      	sub	sp, #60	; 0x3c
 8001402:	af0a      	add	r7, sp, #40	; 0x28
 8001404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e10f      	b.n	8001630 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f005 feee 	bl	800720c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fa27 	bl	80038a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	687e      	ldr	r6, [r7, #4]
 800145c:	466d      	mov	r5, sp
 800145e:	f106 0410 	add.w	r4, r6, #16
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001472:	1d33      	adds	r3, r6, #4
 8001474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001476:	6838      	ldr	r0, [r7, #0]
 8001478:	f002 f8fe 	bl	8003678 <USB_CoreInit>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0d0      	b.n	8001630 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fa15 	bl	80038c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e04a      	b.n	8001536 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	333d      	adds	r3, #61	; 0x3d
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	333c      	adds	r3, #60	; 0x3c
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	b298      	uxth	r0, r3
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	3344      	adds	r3, #68	; 0x44
 80014dc:	4602      	mov	r2, r0
 80014de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3340      	adds	r3, #64	; 0x40
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3348      	adds	r3, #72	; 0x48
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	334c      	adds	r3, #76	; 0x4c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3354      	adds	r3, #84	; 0x54
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3af      	bcc.n	80014a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e044      	b.n	80015d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	3301      	adds	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3b5      	bcc.n	8001546 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	687e      	ldr	r6, [r7, #4]
 80015e2:	466d      	mov	r5, sp
 80015e4:	f106 0410 	add.w	r4, r6, #16
 80015e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f8:	1d33      	adds	r3, r6, #4
 80015fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f002 f9ad 	bl	800395c <USB_DevInit>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00d      	b.n	8001630 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fafc 	bl	8004c26 <USB_DevDisconnect>

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001638 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_PCD_Start+0x1c>
 8001650:	2302      	movs	r3, #2
 8001652:	e020      	b.n	8001696 <HAL_PCD_Start+0x5e>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	2b01      	cmp	r3, #1
 8001662:	d109      	bne.n	8001678 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 f8ff 	bl	8003880 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 faac 	bl	8004be4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800169e:	b590      	push	{r4, r7, lr}
 80016a0:	b08d      	sub	sp, #52	; 0x34
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fb6a 	bl	8004d8e <USB_GetMode>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 848a 	bne.w	8001fd6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 face 	bl	8004c68 <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8480 	beq.w	8001fd4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fabb 	bl	8004c68 <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d107      	bne.n	800170c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f002 0202 	and.w	r2, r2, #2
 800170a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f003 faa9 	bl	8004c68 <USB_ReadInterrupts>
 8001716:	4603      	mov	r3, r0
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b10      	cmp	r3, #16
 800171e:	d161      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0210 	bic.w	r2, r2, #16
 800172e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f003 020f 	and.w	r2, r3, #15
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	0c5b      	lsrs	r3, r3, #17
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	2b02      	cmp	r3, #2
 800175a:	d124      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d035      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	6a38      	ldr	r0, [r7, #32]
 800177c:	f003 f8e0 	bl	8004940 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178c:	441a      	add	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179e:	441a      	add	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	621a      	str	r2, [r3, #32]
 80017a4:	e016      	b.n	80017d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	0c5b      	lsrs	r3, r3, #17
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d110      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017b8:	2208      	movs	r2, #8
 80017ba:	4619      	mov	r1, r3
 80017bc:	6a38      	ldr	r0, [r7, #32]
 80017be:	f003 f8bf 	bl	8004940 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ce:	441a      	add	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fa3d 	bl	8004c68 <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017f8:	f040 80a7 	bne.w	800194a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fa42 	bl	8004c8e <USB_ReadDevAllOutEpInterrupt>
 800180a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800180c:	e099      	b.n	8001942 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 808e 	beq.w	8001936 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f003 fa66 	bl	8004cf6 <USB_ReadDevOutEPInterrupt>
 800182a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	2301      	movs	r3, #1
 8001846:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fec2 	bl	80025d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00c      	beq.n	8001874 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	461a      	mov	r2, r3
 8001868:	2308      	movs	r3, #8
 800186a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800186c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 ff98 	bl	80027a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800188a:	461a      	mov	r2, r3
 800188c:	2310      	movs	r3, #16
 800188e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d030      	beq.n	80018fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b80      	cmp	r3, #128	; 0x80
 80018a4:	d109      	bne.n	80018ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d108      	bne.n	80018ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2200      	movs	r2, #0
 80018dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 fd8d 	bl	8007404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f6:	461a      	mov	r2, r3
 80018f8:	2302      	movs	r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001912:	461a      	mov	r2, r3
 8001914:	2320      	movs	r3, #32
 8001916:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001934:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f af62 	bne.w	800180e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f98a 	bl	8004c68 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800195e:	f040 80db 	bne.w	8001b18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f9ab 	bl	8004cc2 <USB_ReadDevAllInEpInterrupt>
 800196c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001972:	e0cd      	b.n	8001b10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80c2 	beq.w	8001b04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f003 f9d1 	bl	8004d32 <USB_ReadDevInEPInterrupt>
 8001990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d057      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	2201      	movs	r2, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69f9      	ldr	r1, [r7, #28]
 80019b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019bc:	4013      	ands	r3, r2
 80019be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019cc:	461a      	mov	r2, r3
 80019ce:	2301      	movs	r3, #1
 80019d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d132      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	334c      	adds	r3, #76	; 0x4c
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4403      	add	r3, r0
 80019fa:	3348      	adds	r3, #72	; 0x48
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4419      	add	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4403      	add	r3, r0
 8001a0e:	334c      	adds	r3, #76	; 0x4c
 8001a10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d113      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x3a2>
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3354      	adds	r3, #84	; 0x54
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	f003 f9d8 	bl	8004df0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fc61 	bl	800730e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a62:	461a      	mov	r2, r3
 8001a64:	2308      	movs	r3, #8
 8001a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2310      	movs	r3, #16
 8001a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d023      	beq.n	8001af2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aac:	6a38      	ldr	r0, [r7, #32]
 8001aae:	f002 f8b9 	bl	8003c24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	3338      	adds	r3, #56	; 0x38
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	78db      	ldrb	r3, [r3, #3]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f005 fca4 	bl	8007428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aec:	461a      	mov	r2, r3
 8001aee:	2302      	movs	r3, #2
 8001af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fcdb 	bl	80024ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f af2e 	bne.w	8001974 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 f8a3 	bl	8004c68 <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b2c:	d122      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d108      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b54:	2100      	movs	r1, #0
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fec2 	bl	80028e0 <HAL_PCDEx_LPM_Callback>
 8001b5c:	e002      	b.n	8001b64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 fc42 	bl	80073e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 f875 	bl	8004c68 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b88:	d112      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f005 fbfe 	bl	800739c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f857 	bl	8004c68 <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	f040 80b7 	bne.w	8001d36 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2110      	movs	r1, #16
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f81e 	bl	8003c24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bec:	e046      	b.n	8001c7c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	0151      	lsls	r1, r2, #5
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	440a      	add	r2, r1
 8001c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	0151      	lsls	r1, r2, #5
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	0151      	lsls	r1, r2, #5
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	440a      	add	r2, r1
 8001c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3b3      	bcc.n	8001bee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb2:	f043 030b 	orr.w	r3, r3, #11
 8001cb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc8:	f043 030b 	orr.w	r3, r3, #11
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	e015      	b.n	8001cfc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ce6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f043 030b 	orr.w	r3, r3, #11
 8001cfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d20:	461a      	mov	r2, r3
 8001d22:	f003 f865 	bl	8004df0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 ff94 	bl	8004c68 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d124      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 f82a 	bl	8004daa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 ffdf 	bl	8003d1e <USB_GetDevSpeed>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	f001 f9e8 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8001d70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f001 fcde 	bl	800373c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f005 faec 	bl	800735e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 ff64 	bl	8004c68 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d10a      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f005 fac9 	bl	8007342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 ff4f 	bl	8004c68 <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	d122      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	e014      	b.n	8001e10 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fb27 	bl	8002458 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3e5      	bcc.n	8001de6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 ff22 	bl	8004c68 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e2e:	d13b      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e30:	2301      	movs	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
 8001e34:	e02b      	b.n	8001e8e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	3340      	adds	r3, #64	; 0x40
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d115      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da12      	bge.n	8001e88 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	333f      	adds	r3, #63	; 0x3f
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fae8 	bl	8002458 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3ce      	bcc.n	8001e36 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fedb 	bl	8004c68 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ebc:	d155      	bne.n	8001f6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	e045      	b.n	8001f50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d12e      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da2b      	bge.n	8001f4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001efe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d121      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6053      	str	r3, [r2, #4]
            break;
 8001f48:	e007      	b.n	8001f5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d3b4      	bcc.n	8001ec4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fe7a 	bl	8004c68 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7e:	d10a      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f005 fa63 	bl	800744c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fe64 	bl	8004c68 <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d115      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f005 fa53 	bl	8007468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e000      	b.n	8001fd6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001fd4:	bf00      	nop
    }
  }
}
 8001fd6:	3734      	adds	r7, #52	; 0x34
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}

08001fdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_SetAddress+0x1a>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e013      	b.n	800201e <HAL_PCD_SetAddress+0x42>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fdc2 	bl	8004b98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	4608      	mov	r0, r1
 8002030:	4611      	mov	r1, r2
 8002032:	461a      	mov	r2, r3
 8002034:	4603      	mov	r3, r0
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	460b      	mov	r3, r1
 800203a:	803b      	strh	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	da0f      	bge.n	800206c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3338      	adds	r3, #56	; 0x38
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	705a      	strb	r2, [r3, #1]
 800206a:	e00f      	b.n	800208c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	b2da      	uxtb	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002098:	883a      	ldrh	r2, [r7, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	78ba      	ldrb	r2, [r7, #2]
 80020a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020b6:	78bb      	ldrb	r3, [r7, #2]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d102      	bne.n	80020c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_PCD_EP_Open+0xaa>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e00e      	b.n	80020ee <HAL_PCD_EP_Open+0xc8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68f9      	ldr	r1, [r7, #12]
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fe42 	bl	8003d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020ec:	7afb      	ldrb	r3, [r7, #11]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da0f      	bge.n	800212a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3338      	adds	r3, #56	; 0x38
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	705a      	strb	r2, [r3, #1]
 8002128:	e00f      	b.n	800214a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_EP_Close+0x6e>
 8002160:	2302      	movs	r3, #2
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_Close+0x8c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fe80 	bl	8003e78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	460b      	mov	r3, r1
 8002198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d102      	bne.n	80021e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	6979      	ldr	r1, [r7, #20]
 80021fe:	f002 f95f 	bl	80044c0 <USB_EP0StartXfer>
 8002202:	e008      	b.n	8002216 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6979      	ldr	r1, [r7, #20]
 8002212:	f001 ff0d 	bl	8004030 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 020f 	and.w	r2, r3, #15
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	460b      	mov	r3, r1
 800225e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3338      	adds	r3, #56	; 0x38
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	b2da      	uxtb	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6979      	ldr	r1, [r7, #20]
 80022c2:	f002 f8fd 	bl	80044c0 <USB_EP0StartXfer>
 80022c6:	e008      	b.n	80022da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	6979      	ldr	r1, [r7, #20]
 80022d6:	f001 feab 	bl	8004030 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d901      	bls.n	8002302 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e050      	b.n	80023a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da0f      	bge.n	800232a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	3338      	adds	r3, #56	; 0x38
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	705a      	strb	r2, [r3, #1]
 8002328:	e00d      	b.n	8002346 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_PCD_EP_SetStall+0x82>
 8002362:	2302      	movs	r3, #2
 8002364:	e01e      	b.n	80023a4 <HAL_PCD_EP_SetStall+0xc0>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fb3b 	bl	80049f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	b2d9      	uxtb	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002394:	461a      	mov	r2, r3
 8002396:	f002 fd2b 	bl	8004df0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d901      	bls.n	80023ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e042      	b.n	8002450 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da0f      	bge.n	80023f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 020f 	and.w	r2, r3, #15
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	3338      	adds	r3, #56	; 0x38
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	705a      	strb	r2, [r3, #1]
 80023f0:	e00f      	b.n	8002412 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	b2da      	uxtb	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_PCD_EP_ClrStall+0x86>
 800242e:	2302      	movs	r3, #2
 8002430:	e00e      	b.n	8002450 <HAL_PCD_EP_ClrStall+0xa4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fb43 	bl	8004acc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da0c      	bge.n	8002486 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3338      	adds	r3, #56	; 0x38
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	e00c      	b.n	80024a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 f962 	bl	8004770 <USB_EPStopXfer>
 80024ac:	4603      	mov	r3, r0
 80024ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024b0:	7afb      	ldrb	r3, [r7, #11]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af02      	add	r7, sp, #8
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d901      	bls.n	80024f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06c      	b.n	80025cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	d902      	bls.n	800250e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3303      	adds	r3, #3
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002516:	e02b      	b.n	8002570 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	429a      	cmp	r2, r3
 800252c:	d902      	bls.n	8002534 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	3303      	adds	r3, #3
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800254c:	b2db      	uxtb	r3, r3
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f002 f9b6 	bl	80048c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	441a      	add	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	b29b      	uxth	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	429a      	cmp	r2, r3
 8002584:	d809      	bhi.n	800259a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800258e:	429a      	cmp	r2, r3
 8002590:	d203      	bcs.n	800259a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1be      	bne.n	8002518 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d811      	bhi.n	80025ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2201      	movs	r2, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	43db      	mvns	r3, r3
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025c6:	4013      	ands	r3, r2
 80025c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	333c      	adds	r3, #60	; 0x3c
 80025ec:	3304      	adds	r3, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d17b      	bne.n	8002702 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d015      	beq.n	8002640 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4a61      	ldr	r2, [pc, #388]	; (800279c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	f240 80b9 	bls.w	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b3 	beq.w	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	461a      	mov	r2, r3
 8002638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263c:	6093      	str	r3, [r2, #8]
 800263e:	e0a7      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2320      	movs	r3, #32
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	e098      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 8093 	bne.w	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4a4b      	ldr	r2, [pc, #300]	; (800279c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d90f      	bls.n	8002692 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	461a      	mov	r2, r3
 800268a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	e07e      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	3304      	adds	r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d114      	bne.n	80026f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026dc:	461a      	mov	r2, r3
 80026de:	2101      	movs	r1, #1
 80026e0:	f002 fb86 	bl	8004df0 <USB_EP0_OutStart>
 80026e4:	e006      	b.n	80026f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	441a      	add	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f004 fdec 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
 8002700:	e046      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d124      	bne.n	8002754 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	e032      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	2320      	movs	r3, #32
 8002744:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4619      	mov	r1, r3
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 fdc3 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
 8002752:	e01d      	b.n	8002790 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d114      	bne.n	8002784 <PCD_EP_OutXfrComplete_int+0x1b0>
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800277c:	461a      	mov	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	f002 fb36 	bl	8004df0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f004 fda4 	bl	80072d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	4f54300a 	.word	0x4f54300a
 80027a0:	4f54310a 	.word	0x4f54310a

080027a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	333c      	adds	r3, #60	; 0x3c
 80027bc:	3304      	adds	r3, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <PCD_EP_OutSetupPacket_int+0x88>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d90e      	bls.n	80027f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f004 fd5b 	bl	80072b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <PCD_EP_OutSetupPacket_int+0x88>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d90c      	bls.n	8002820 <PCD_EP_OutSetupPacket_int+0x7c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d108      	bne.n	8002820 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002818:	461a      	mov	r2, r3
 800281a:	2101      	movs	r1, #1
 800281c:	f002 fae8 	bl	8004df0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	4f54300a 	.word	0x4f54300a

08002830 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
 800283c:	4613      	mov	r3, r2
 800283e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800284e:	883b      	ldrh	r3, [r7, #0]
 8002850:	0419      	lsls	r1, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	430a      	orrs	r2, r1
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
 800285c:	e028      	b.n	80028b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e00d      	b.n	800288e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3340      	adds	r3, #64	; 0x40
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	3301      	adds	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	3b01      	subs	r3, #1
 8002894:	429a      	cmp	r2, r3
 8002896:	d3ec      	bcc.n	8002872 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002898:	883b      	ldrh	r3, [r7, #0]
 800289a:	0418      	lsls	r0, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	4302      	orrs	r2, r0
 80028a8:	3340      	adds	r3, #64	; 0x40
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e267      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d075      	beq.n	8002a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d00c      	beq.n	800293c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002922:	4b85      	ldr	r3, [pc, #532]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d112      	bne.n	8002954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292e:	4b82      	ldr	r3, [pc, #520]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293a:	d10b      	bne.n	8002954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	4b7e      	ldr	r3, [pc, #504]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d05b      	beq.n	8002a00 <HAL_RCC_OscConfig+0x108>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d157      	bne.n	8002a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e242      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x74>
 800295e:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a75      	ldr	r2, [pc, #468]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e01d      	b.n	80029a8 <HAL_RCC_OscConfig+0xb0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x98>
 8002976:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6f      	ldr	r2, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b6d      	ldr	r3, [pc, #436]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6c      	ldr	r2, [pc, #432]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0xb0>
 8002990:	4b69      	ldr	r3, [pc, #420]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a68      	ldr	r2, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b66      	ldr	r3, [pc, #408]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe fa46 	bl	8000e40 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b8:	f7fe fa42 	bl	8000e40 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e207      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0xc0>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fa32 	bl	8000e40 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe fa2e 	bl	8000e40 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1f3      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0xe8>
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d063      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a26:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_RCC_OscConfig+0x152>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e1c7      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4937      	ldr	r1, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	e03a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x244>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f9e7 	bl	8000e40 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a76:	f7fe f9e3 	bl	8000e40 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e1a8      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4925      	ldr	r1, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_OscConfig+0x244>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f9c6 	bl	8000e40 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe f9c2 	bl	8000e40 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e187      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d036      	beq.n	8002b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x248>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe f9a6 	bl	8000e40 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe f9a2 	bl	8000e40 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e167      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x200>
 8002b16:	e01b      	b.n	8002b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_OscConfig+0x248>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe f98f 	bl	8000e40 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	e00e      	b.n	8002b44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b26:	f7fe f98b 	bl	8000e40 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d907      	bls.n	8002b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e150      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	42470000 	.word	0x42470000
 8002b40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b88      	ldr	r3, [pc, #544]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ea      	bne.n	8002b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8097 	beq.w	8002c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a7c      	ldr	r2, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4b77      	ldr	r3, [pc, #476]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d118      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9a:	4b74      	ldr	r3, [pc, #464]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a73      	ldr	r2, [pc, #460]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe f94b 	bl	8000e40 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bae:	f7fe f947 	bl	8000e40 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e10c      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_OscConfig+0x474>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2ea>
 8002bd4:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x324>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x30c>
 8002bea:	4b5f      	ldr	r3, [pc, #380]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a5e      	ldr	r2, [pc, #376]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	4b5c      	ldr	r3, [pc, #368]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a5b      	ldr	r2, [pc, #364]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0x324>
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a57      	ldr	r2, [pc, #348]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	4b55      	ldr	r3, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f023 0304 	bic.w	r3, r3, #4
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe f90c 	bl	8000e40 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f908 	bl	8000e40 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0cb      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ee      	beq.n	8002c2c <HAL_RCC_OscConfig+0x334>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c50:	f7fe f8f6 	bl	8000e40 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe f8f2 	bl	8000e40 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0b5      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ee      	bne.n	8002c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c80:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	4a38      	ldr	r2, [pc, #224]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a1 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d05c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d141      	bne.n	8002d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f8c6 	bl	8000e40 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe f8c2 	bl	8000e40 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e087      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	019b      	lsls	r3, r3, #6
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	491b      	ldr	r1, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe f89b 	bl	8000e40 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe f897 	bl	8000e40 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e05c      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x416>
 8002d2c:	e054      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCC_OscConfig+0x478>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe f884 	bl	8000e40 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe f880 	bl	8000e40 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e045      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x470>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x444>
 8002d5a:	e03d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e038      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x4ec>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d121      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d111      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0cc      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d90c      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d044      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d119      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e067      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4934      	ldr	r1, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fd ffb2 	bl	8000e40 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fd ffae 	bl	8000e40 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d20c      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ff12 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	080078f4 	.word	0x080078f4
 8002fac:	2000000c 	.word	0x2000000c
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b090      	sub	sp, #64	; 0x40
 8002fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fcc:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	f200 80a1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d003      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3a>
 8002fe6:	e09b      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fec:	e09b      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ff2:	e098      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d028      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	627a      	str	r2, [r7, #36]	; 0x24
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800301c:	2100      	movs	r1, #0
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 8003020:	fb03 f201 	mul.w	r2, r3, r1
 8003024:	2300      	movs	r3, #0
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	4413      	add	r3, r2
 800302c:	4a43      	ldr	r2, [pc, #268]	; (800313c <HAL_RCC_GetSysClockFreq+0x188>)
 800302e:	fba0 1202 	umull	r1, r2, r0, r2
 8003032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003034:	460a      	mov	r2, r1
 8003036:	62ba      	str	r2, [r7, #40]	; 0x28
 8003038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	2200      	movs	r2, #0
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	61fa      	str	r2, [r7, #28]
 8003046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800304e:	f7fd f8c3 	bl	80001d8 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4613      	mov	r3, r2
 8003058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305a:	e053      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	617a      	str	r2, [r7, #20]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800306e:	f04f 0b00 	mov.w	fp, #0
 8003072:	4652      	mov	r2, sl
 8003074:	465b      	mov	r3, fp
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	ebb2 080a 	subs.w	r8, r2, sl
 800308e:	eb63 090b 	sbc.w	r9, r3, fp
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800309e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030a6:	ebb2 0408 	subs.w	r4, r2, r8
 80030aa:	eb63 0509 	sbc.w	r5, r3, r9
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	00eb      	lsls	r3, r5, #3
 80030b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	4614      	mov	r4, r2
 80030c0:	461d      	mov	r5, r3
 80030c2:	eb14 030a 	adds.w	r3, r4, sl
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	eb45 030b 	adc.w	r3, r5, fp
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	2200      	movs	r2, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	60fa      	str	r2, [r7, #12]
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	f7fd f86e 	bl	80001d8 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x184>)
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003128:	4618      	mov	r0, r3
 800312a:	3740      	adds	r7, #64	; 0x40
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	017d7840 	.word	0x017d7840

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07b      	b.n	8003262 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d009      	beq.n	8003190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	e005      	b.n	8003190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fcd6 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	ea42 0103 	orr.w	r1, r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0104 	and.w	r1, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0210 	and.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_SPI_Transmit+0x22>
 8003288:	2302      	movs	r3, #2
 800328a:	e126      	b.n	80034da <HAL_SPI_Transmit+0x270>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003294:	f7fd fdd4 	bl	8000e40 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ae:	e10b      	b.n	80034c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Transmit+0x52>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c0:	e102      	b.n	80034c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2203      	movs	r2, #3
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003308:	d10f      	bne.n	800332a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003318:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003328:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d007      	beq.n	8003348 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003346:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003350:	d14b      	bne.n	80033ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_SPI_Transmit+0xf6>
 800335a:	8afb      	ldrh	r3, [r7, #22]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d13e      	bne.n	80033de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	1c9a      	adds	r2, r3, #2
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003384:	e02b      	b.n	80033de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d112      	bne.n	80033ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b8:	e011      	b.n	80033de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ba:	f7fd fd41 	bl	8000e40 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d803      	bhi.n	80033d2 <HAL_SPI_Transmit+0x168>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Transmit+0x16e>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033dc:	e074      	b.n	80034c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ce      	bne.n	8003386 <HAL_SPI_Transmit+0x11c>
 80033e8:	e04c      	b.n	8003484 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_Transmit+0x18e>
 80033f2:	8afb      	ldrh	r3, [r7, #22]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d140      	bne.n	800347a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	7812      	ldrb	r2, [r2, #0]
 8003404:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800341e:	e02c      	b.n	800347a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d113      	bne.n	8003456 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	7812      	ldrb	r2, [r2, #0]
 800343a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	86da      	strh	r2, [r3, #54]	; 0x36
 8003454:	e011      	b.n	800347a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003456:	f7fd fcf3 	bl	8000e40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d803      	bhi.n	800346e <HAL_SPI_Transmit+0x204>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d102      	bne.n	8003474 <HAL_SPI_Transmit+0x20a>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003478:	e026      	b.n	80034c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1cd      	bne.n	8003420 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f8b3 	bl	80035f4 <SPI_EndRxTxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e000      	b.n	80034c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034f4:	f7fd fca4 	bl	8000e40 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4413      	add	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003504:	f7fd fc9c 	bl	8000e40 <HAL_GetTick>
 8003508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	015b      	lsls	r3, r3, #5
 8003510:	0d1b      	lsrs	r3, r3, #20
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	e054      	b.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d050      	beq.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003524:	f7fd fc8c 	bl	8000e40 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	429a      	cmp	r2, r3
 8003532:	d902      	bls.n	800353a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d13d      	bne.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d111      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355c:	d004      	beq.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003566:	d107      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003580:	d10f      	bne.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e017      	b.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d19b      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <SPI_EndRxTxTransaction+0x7c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <SPI_EndRxTxTransaction+0x80>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0d5b      	lsrs	r3, r3, #21
 800360c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361e:	d112      	bne.n	8003646 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff ff5a 	bl	80034e4 <SPI_WaitFlagStateUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	3b01      	subs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d0f2      	beq.n	8003646 <SPI_EndRxTxTransaction+0x52>
 8003660:	e000      	b.n	8003664 <SPI_EndRxTxTransaction+0x70>
        break;
 8003662:	bf00      	nop
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000000c 	.word	0x2000000c
 8003674:	165e9f81 	.word	0x165e9f81

08003678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003678:	b084      	sub	sp, #16
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	f107 001c 	add.w	r0, r7, #28
 8003686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2b01      	cmp	r3, #1
 800368e:	d122      	bne.n	80036d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 fbee 	bl	8004eac <USB_CoreReset>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e01a      	b.n	800370c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f001 fbe2 	bl	8004eac <USB_CoreReset>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
 80036fe:	e005      	b.n	800370c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10b      	bne.n	800372a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f043 0206 	orr.w	r2, r3, #6
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003736:	b004      	add	sp, #16
 8003738:	4770      	bx	lr
	...

0800373c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d165      	bne.n	800381c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a41      	ldr	r2, [pc, #260]	; (8003858 <USB_SetTurnaroundTime+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d906      	bls.n	8003766 <USB_SetTurnaroundTime+0x2a>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <USB_SetTurnaroundTime+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d202      	bcs.n	8003766 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003760:	230f      	movs	r3, #15
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e062      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a3c      	ldr	r2, [pc, #240]	; (800385c <USB_SetTurnaroundTime+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d306      	bcc.n	800377c <USB_SetTurnaroundTime+0x40>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <USB_SetTurnaroundTime+0x124>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d202      	bcs.n	800377c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003776:	230e      	movs	r3, #14
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e057      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4a38      	ldr	r2, [pc, #224]	; (8003860 <USB_SetTurnaroundTime+0x124>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d306      	bcc.n	8003792 <USB_SetTurnaroundTime+0x56>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4a37      	ldr	r2, [pc, #220]	; (8003864 <USB_SetTurnaroundTime+0x128>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d202      	bcs.n	8003792 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800378c:	230d      	movs	r3, #13
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e04c      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a33      	ldr	r2, [pc, #204]	; (8003864 <USB_SetTurnaroundTime+0x128>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d306      	bcc.n	80037a8 <USB_SetTurnaroundTime+0x6c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a32      	ldr	r2, [pc, #200]	; (8003868 <USB_SetTurnaroundTime+0x12c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d802      	bhi.n	80037a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037a2:	230c      	movs	r3, #12
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e041      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <USB_SetTurnaroundTime+0x12c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d906      	bls.n	80037be <USB_SetTurnaroundTime+0x82>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <USB_SetTurnaroundTime+0x130>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d802      	bhi.n	80037be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037b8:	230b      	movs	r3, #11
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e036      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <USB_SetTurnaroundTime+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d906      	bls.n	80037d4 <USB_SetTurnaroundTime+0x98>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <USB_SetTurnaroundTime+0x134>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d802      	bhi.n	80037d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037ce:	230a      	movs	r3, #10
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e02b      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4a26      	ldr	r2, [pc, #152]	; (8003870 <USB_SetTurnaroundTime+0x134>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d906      	bls.n	80037ea <USB_SetTurnaroundTime+0xae>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a25      	ldr	r2, [pc, #148]	; (8003874 <USB_SetTurnaroundTime+0x138>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d202      	bcs.n	80037ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037e4:	2309      	movs	r3, #9
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e020      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <USB_SetTurnaroundTime+0x138>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d306      	bcc.n	8003800 <USB_SetTurnaroundTime+0xc4>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <USB_SetTurnaroundTime+0x13c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037fa:	2308      	movs	r3, #8
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e015      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <USB_SetTurnaroundTime+0x13c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d906      	bls.n	8003816 <USB_SetTurnaroundTime+0xda>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <USB_SetTurnaroundTime+0x140>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d202      	bcs.n	8003816 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003810:	2307      	movs	r3, #7
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e00a      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003816:	2306      	movs	r3, #6
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e007      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003822:	2309      	movs	r3, #9
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e001      	b.n	800382c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003828:	2309      	movs	r3, #9
 800382a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	00d8acbf 	.word	0x00d8acbf
 800385c:	00e4e1c0 	.word	0x00e4e1c0
 8003860:	00f42400 	.word	0x00f42400
 8003864:	01067380 	.word	0x01067380
 8003868:	011a499f 	.word	0x011a499f
 800386c:	01312cff 	.word	0x01312cff
 8003870:	014ca43f 	.word	0x014ca43f
 8003874:	016e3600 	.word	0x016e3600
 8003878:	01a6ab1f 	.word	0x01a6ab1f
 800387c:	01e84800 	.word	0x01e84800

08003880 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fd fab0 	bl	8000e58 <HAL_Delay>
      ms++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f001 fa45 	bl	8004d8e <USB_GetMode>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d01e      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b31      	cmp	r3, #49	; 0x31
 800390e:	d9f0      	bls.n	80038f2 <USB_SetCurrentMode+0x2e>
 8003910:	e01a      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d115      	bne.n	8003944 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003924:	2001      	movs	r0, #1
 8003926:	f7fd fa97 	bl	8000e58 <HAL_Delay>
      ms++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f001 fa2c 	bl	8004d8e <USB_GetMode>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b31      	cmp	r3, #49	; 0x31
 8003940:	d9f0      	bls.n	8003924 <USB_SetCurrentMode+0x60>
 8003942:	e001      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e005      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b32      	cmp	r3, #50	; 0x32
 800394c:	d101      	bne.n	8003952 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e009      	b.n	8003990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3340      	adds	r3, #64	; 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3301      	adds	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0e      	cmp	r3, #14
 8003994:	d9f2      	bls.n	800397c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11c      	bne.n	80039d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
 80039d4:	e00b      	b.n	80039ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	4619      	mov	r1, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	461a      	mov	r2, r3
 8003a0a:	680b      	ldr	r3, [r1, #0]
 8003a0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10c      	bne.n	8003a2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f965 	bl	8003cec <USB_SetDevSpeed>
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f960 	bl	8003cec <USB_SetDevSpeed>
 8003a2c:	e003      	b.n	8003a36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a2e:	2103      	movs	r1, #3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f95b 	bl	8003cec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a36:	2110      	movs	r1, #16
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8f3 	bl	8003c24 <USB_FlushTxFifo>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f91f 	bl	8003c8c <USB_FlushRxFifo>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e043      	b.n	8003b0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a98:	d118      	bne.n	8003acc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e013      	b.n	8003ade <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e008      	b.n	8003ade <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3301      	adds	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3b7      	bcc.n	8003a82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e043      	b.n	8003ba0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d118      	bne.n	8003b62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e013      	b.n	8003b74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e008      	b.n	8003b74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d3b7      	bcc.n	8003b18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <USB_DevInit+0x2c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	803c3800 	.word	0x803c3800

08003c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e01b      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	daf2      	bge.n	8003c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	019b      	lsls	r3, r3, #6
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00030d40 	.word	0x00030d40

08003c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e018      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	daf2      	bge.n	8003c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d0f0      	beq.n	8003cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	00030d40 	.word	0x00030d40

08003cec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0306 	and.w	r3, r3, #6
 8003d36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]
 8003d42:	e00a      	b.n	8003d5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d002      	beq.n	8003d50 <USB_GetDevSpeed+0x32>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d102      	bne.n	8003d56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d50:	2302      	movs	r3, #2
 8003d52:	75fb      	strb	r3, [r7, #23]
 8003d54:	e001      	b.n	8003d5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d56:	230f      	movs	r3, #15
 8003d58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d13a      	bne.n	8003dfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	68f9      	ldr	r1, [r7, #12]
 8003d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d155      	bne.n	8003e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	791b      	ldrb	r3, [r3, #4]
 8003dd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	059b      	lsls	r3, r3, #22
 8003dde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003de0:	4313      	orrs	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e036      	b.n	8003e68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11a      	bne.n	8003e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	791b      	ldrb	r3, [r3, #4]
 8003e4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d161      	bne.n	8003f58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eaa:	d11f      	bne.n	8003eec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f30:	4013      	ands	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4b35      	ldr	r3, [pc, #212]	; (8004028 <USB_DeactivateEndpoint+0x1b0>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
 8003f56:	e060      	b.n	800401a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6e:	d11f      	bne.n	8003fb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	0159      	lsls	r1, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	440b      	add	r3, r1
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	4619      	mov	r1, r3
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <USB_DeactivateEndpoint+0x1b4>)
 8004016:	4013      	ands	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	ec337800 	.word	0xec337800
 800402c:	eff37800 	.word	0xeff37800

08004030 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b01      	cmp	r3, #1
 800404e:	f040 815c 	bne.w	800430a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d132      	bne.n	80040c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800407c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b8:	0cdb      	lsrs	r3, r3, #19
 80040ba:	04db      	lsls	r3, r3, #19
 80040bc:	6113      	str	r3, [r2, #16]
 80040be:	e074      	b.n	80041aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	0cdb      	lsrs	r3, r3, #19
 80040dc:	04db      	lsls	r3, r3, #19
 80040de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	440b      	add	r3, r1
 800411c:	1e59      	subs	r1, r3, #1
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	fbb1 f3f3 	udiv	r3, r1, r3
 8004126:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004128:	4b9d      	ldr	r3, [pc, #628]	; (80043a0 <USB_EPStartXfer+0x370>)
 800412a:	400b      	ands	r3, r1
 800412c:	69b9      	ldr	r1, [r7, #24]
 800412e:	0148      	lsls	r0, r1, #5
 8004130:	69f9      	ldr	r1, [r7, #28]
 8004132:	4401      	add	r1, r0
 8004134:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004138:	4313      	orrs	r3, r2
 800413a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	0148      	lsls	r0, r1, #5
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	4401      	add	r1, r0
 800415a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d11f      	bne.n	80041aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004184:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004188:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d14b      	bne.n	8004248 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d128      	bne.n	8004226 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e00f      	b.n	8004226 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e133      	b.n	80044b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004266:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	791b      	ldrb	r3, [r3, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d015      	beq.n	800429c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 811b 	beq.w	80044b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004296:	4313      	orrs	r3, r2
 8004298:	634b      	str	r3, [r1, #52]	; 0x34
 800429a:	e109      	b.n	80044b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d110      	bne.n	80042ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e00f      	b.n	80042ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	b298      	uxth	r0, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4603      	mov	r3, r0
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fade 	bl	80048c4 <USB_WritePacket>
 8004308:	e0d2      	b.n	80044b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	0cdb      	lsrs	r3, r3, #19
 8004326:	04db      	lsls	r3, r3, #19
 8004328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800434c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d126      	bne.n	80043a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	0148      	lsls	r0, r1, #5
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	4401      	add	r1, r0
 8004374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800439a:	6113      	str	r3, [r2, #16]
 800439c:	e03a      	b.n	8004414 <USB_EPStartXfer+0x3e4>
 800439e:	bf00      	nop
 80043a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	8afa      	ldrh	r2, [r7, #22]
 80043c0:	fb03 f202 	mul.w	r2, r3, r2
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	8afb      	ldrh	r3, [r7, #22]
 80043d8:	04d9      	lsls	r1, r3, #19
 80043da:	4b38      	ldr	r3, [pc, #224]	; (80044bc <USB_EPStartXfer+0x48c>)
 80043dc:	400b      	ands	r3, r1
 80043de:	69b9      	ldr	r1, [r7, #24]
 80043e0:	0148      	lsls	r0, r1, #5
 80043e2:	69f9      	ldr	r1, [r7, #28]
 80043e4:	4401      	add	r1, r0
 80043e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ea:	4313      	orrs	r3, r2
 80043ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	0148      	lsls	r0, r1, #5
 8004408:	69f9      	ldr	r1, [r7, #28]
 800440a:	4401      	add	r1, r0
 800440c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6919      	ldr	r1, [r3, #16]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	460a      	mov	r2, r1
 8004434:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	791b      	ldrb	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d128      	bne.n	8004490 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d110      	bne.n	8004470 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e00f      	b.n	8004490 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	1ff80000 	.word	0x1ff80000

080044c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 80ce 	bne.w	800467e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d132      	bne.n	8004550 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800450c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004548:	0cdb      	lsrs	r3, r3, #19
 800454a:	04db      	lsls	r3, r3, #19
 800454c:	6113      	str	r3, [r2, #16]
 800454e:	e04e      	b.n	80045ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800456a:	0cdb      	lsrs	r3, r3, #19
 800456c:	04db      	lsls	r3, r3, #19
 800456e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800458e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004592:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	0148      	lsls	r0, r1, #5
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	4401      	add	r1, r0
 80045e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ea:	4313      	orrs	r3, r2
 80045ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d11e      	bne.n	8004632 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	461a      	mov	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e097      	b.n	8004762 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004650:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8083 	beq.w	8004762 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004678:	4313      	orrs	r3, r2
 800467a:	634b      	str	r3, [r1, #52]	; 0x34
 800467c:	e071      	b.n	8004762 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004698:	0cdb      	lsrs	r3, r3, #19
 800469a:	04db      	lsls	r3, r3, #19
 800469c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	0148      	lsls	r0, r1, #5
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	4401      	add	r1, r0
 8004718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800471c:	4313      	orrs	r3, r2
 800471e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10d      	bne.n	8004742 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	460a      	mov	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004760:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d14a      	bne.n	8004824 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047a6:	f040 8086 	bne.w	80048b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80047fe:	4293      	cmp	r3, r2
 8004800:	d902      	bls.n	8004808 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
          break;
 8004806:	e056      	b.n	80048b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004820:	d0e7      	beq.n	80047f2 <USB_EPStopXfer+0x82>
 8004822:	e048      	b.n	80048b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800483c:	d13b      	bne.n	80048b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004860:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004892:	4293      	cmp	r3, r2
 8004894:	d902      	bls.n	800489c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
          break;
 800489a:	e00c      	b.n	80048b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b4:	d0e7      	beq.n	8004886 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	460b      	mov	r3, r1
 80048d4:	71fb      	strb	r3, [r7, #7]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d123      	bne.n	8004932 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	3303      	adds	r3, #3
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e018      	b.n	800492a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	031a      	lsls	r2, r3, #12
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	461a      	mov	r2, r3
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	3301      	adds	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3301      	adds	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3e2      	bcc.n	80048f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3724      	adds	r7, #36	; 0x24
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004940:	b480      	push	{r7}
 8004942:	b08b      	sub	sp, #44	; 0x2c
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	b29b      	uxth	r3, r3
 800495c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	e014      	b.n	8004996 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	601a      	str	r2, [r3, #0]
    pDest++;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	3301      	adds	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	3301      	adds	r3, #1
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3301      	adds	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	3301      	adds	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3301      	adds	r3, #1
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	429a      	cmp	r2, r3
 800499c:	d3e6      	bcc.n	800496c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800499e:	8bfb      	ldrh	r3, [r7, #30]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01e      	beq.n	80049e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	461a      	mov	r2, r3
 80049b0:	f107 0310 	add.w	r3, r7, #16
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	701a      	strb	r2, [r3, #0]
      i++;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	3301      	adds	r3, #1
 80049ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	3301      	adds	r3, #1
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049d6:	8bfb      	ldrh	r3, [r7, #30]
 80049d8:	3b01      	subs	r3, #1
 80049da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ea      	bne.n	80049b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	372c      	adds	r7, #44	; 0x2c
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d12c      	bne.n	8004a66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db12      	blt.n	8004a44 <USB_EPSetStall+0x54>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e02b      	b.n	8004abe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db12      	blt.n	8004a9e <USB_EPSetStall+0xae>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004abc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d128      	bne.n	8004b3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	791b      	ldrb	r3, [r3, #4]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d003      	beq.n	8004b18 <USB_EPClearStall+0x4c>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d138      	bne.n	8004b8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e027      	b.n	8004b8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	0151      	lsls	r1, r2, #5
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	440a      	add	r2, r1
 8004b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	791b      	ldrb	r3, [r3, #4]
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d003      	beq.n	8004b6a <USB_EPClearStall+0x9e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10f      	bne.n	8004b8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c12:	f023 0302 	bic.w	r3, r3, #2
 8004c16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	b29b      	uxth	r3, r3
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4013      	ands	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d24:	68bb      	ldr	r3, [r7, #8]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b087      	sub	sp, #28
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	01db      	lsls	r3, r3, #7
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d80:	68bb      	ldr	r3, [r7, #8]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dc8:	f023 0307 	bic.w	r3, r3, #7
 8004dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	333c      	adds	r3, #60	; 0x3c
 8004e06:	3304      	adds	r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <USB_EP0_OutStart+0xb8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d90a      	bls.n	8004e2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e24:	d101      	bne.n	8004e2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e037      	b.n	8004e9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e58:	f043 0318 	orr.w	r3, r3, #24
 8004e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d10f      	bne.n	8004e98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	4f54300a 	.word	0x4f54300a

08004eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <USB_CoreReset+0x64>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e01b      	b.n	8004f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	daf2      	bge.n	8004eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <USB_CoreReset+0x64>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e006      	b.n	8004f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d0f0      	beq.n	8004ee2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	00030d40 	.word	0x00030d40

08004f14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f24:	f002 fc38 	bl	8007798 <USBD_static_malloc>
 8004f28:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	32b0      	adds	r2, #176	; 0xb0
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0d4      	b.n	80050ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f44:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f48:	2100      	movs	r1, #0
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f002 fc9a 	bl	8007884 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	32b0      	adds	r2, #176	; 0xb0
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32b0      	adds	r2, #176	; 0xb0
 8004f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7c1b      	ldrb	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d138      	bne.n	8004fee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f7c:	4b5e      	ldr	r3, [pc, #376]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004f7e:	7819      	ldrb	r1, [r3, #0]
 8004f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f84:	2202      	movs	r2, #2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f002 fae3 	bl	8007552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3324      	adds	r3, #36	; 0x24
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fa6:	4b55      	ldr	r3, [pc, #340]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8004fa8:	7819      	ldrb	r1, [r3, #0]
 8004faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fae:	2202      	movs	r2, #2
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f002 face 	bl	8007552 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fb6:	4b51      	ldr	r3, [pc, #324]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f003 020f 	and.w	r2, r3, #15
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fce:	2201      	movs	r2, #1
 8004fd0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <USBD_CDC_Init+0x1ec>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3326      	adds	r3, #38	; 0x26
 8004fe8:	2210      	movs	r2, #16
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e035      	b.n	800505a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fee:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004ff0:	7819      	ldrb	r1, [r3, #0]
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f002 faab 	bl	8007552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	; (80050f8 <USBD_CDC_Init+0x1e4>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	2201      	movs	r2, #1
 8005014:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8005018:	7819      	ldrb	r1, [r3, #0]
 800501a:	2340      	movs	r3, #64	; 0x40
 800501c:	2202      	movs	r2, #2
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f002 fa97 	bl	8007552 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005024:	4b35      	ldr	r3, [pc, #212]	; (80050fc <USBD_CDC_Init+0x1e8>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800503c:	2201      	movs	r2, #1
 800503e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <USBD_CDC_Init+0x1ec>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 020f 	and.w	r2, r3, #15
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3326      	adds	r3, #38	; 0x26
 8005056:	2210      	movs	r2, #16
 8005058:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <USBD_CDC_Init+0x1ec>)
 800505c:	7819      	ldrb	r1, [r3, #0]
 800505e:	2308      	movs	r3, #8
 8005060:	2203      	movs	r2, #3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f002 fa75 	bl	8007552 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <USBD_CDC_Init+0x1ec>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3324      	adds	r3, #36	; 0x24
 800507e:	2201      	movs	r2, #1
 8005080:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	33b0      	adds	r3, #176	; 0xb0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050b8:	2302      	movs	r3, #2
 80050ba:	e018      	b.n	80050ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <USBD_CDC_Init+0x1e8>)
 80050c6:	7819      	ldrb	r1, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f002 fb2c 	bl	8007730 <USBD_LL_PrepareReceive>
 80050d8:	e008      	b.n	80050ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <USBD_CDC_Init+0x1e8>)
 80050dc:	7819      	ldrb	r1, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050e4:	2340      	movs	r3, #64	; 0x40
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fb22 	bl	8007730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000009f 	.word	0x2000009f
 80050fc:	200000a0 	.word	0x200000a0
 8005100:	200000a1 	.word	0x200000a1

08005104 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005110:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <USBD_CDC_DeInit+0xf8>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 fa41 	bl	800759e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800511c:	4b37      	ldr	r3, [pc, #220]	; (80051fc <USBD_CDC_DeInit+0xf8>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	2200      	movs	r2, #0
 8005134:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <USBD_CDC_DeInit+0xfc>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f002 fa2e 	bl	800759e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <USBD_CDC_DeInit+0xfc>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f003 020f 	and.w	r2, r3, #15
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800515a:	2200      	movs	r2, #0
 800515c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <USBD_CDC_DeInit+0x100>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f002 fa1a 	bl	800759e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <USBD_CDC_DeInit+0x100>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	2200      	movs	r2, #0
 8005182:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <USBD_CDC_DeInit+0x100>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 020f 	and.w	r2, r3, #15
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3326      	adds	r3, #38	; 0x26
 800519a:	2200      	movs	r2, #0
 800519c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	32b0      	adds	r2, #176	; 0xb0
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	33b0      	adds	r3, #176	; 0xb0
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	32b0      	adds	r2, #176	; 0xb0
 80051ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f002 faee 	bl	80077b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	32b0      	adds	r2, #176	; 0xb0
 80051e2:	2100      	movs	r1, #0
 80051e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000009f 	.word	0x2000009f
 8005200:	200000a0 	.word	0x200000a0
 8005204:	200000a1 	.word	0x200000a1

08005208 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	32b0      	adds	r2, #176	; 0xb0
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	e0bf      	b.n	80053b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005240:	2b00      	cmp	r3, #0
 8005242:	d050      	beq.n	80052e6 <USBD_CDC_Setup+0xde>
 8005244:	2b20      	cmp	r3, #32
 8005246:	f040 80af 	bne.w	80053a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03a      	beq.n	80052c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	b25b      	sxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	da1b      	bge.n	8005294 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	33b0      	adds	r3, #176	; 0xb0
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005272:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	88d2      	ldrh	r2, [r2, #6]
 8005278:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b07      	cmp	r3, #7
 8005280:	bf28      	it	cs
 8005282:	2307      	movcs	r3, #7
 8005284:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	89fa      	ldrh	r2, [r7, #14]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fd43 	bl	8006d18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005292:	e090      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	785a      	ldrb	r2, [r3, #1]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	2b3f      	cmp	r3, #63	; 0x3f
 80052a4:	d803      	bhi.n	80052ae <USBD_CDC_Setup+0xa6>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	88db      	ldrh	r3, [r3, #6]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	e000      	b.n	80052b0 <USBD_CDC_Setup+0xa8>
 80052ae:	2240      	movs	r2, #64	; 0x40
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052be:	461a      	mov	r2, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 fd55 	bl	8006d70 <USBD_CtlPrepareRx>
      break;
 80052c6:	e076      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	33b0      	adds	r3, #176	; 0xb0
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	7850      	ldrb	r0, [r2, #1]
 80052de:	2200      	movs	r2, #0
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	4798      	blx	r3
      break;
 80052e4:	e067      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	2b0b      	cmp	r3, #11
 80052ec:	d851      	bhi.n	8005392 <USBD_CDC_Setup+0x18a>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <USBD_CDC_Setup+0xec>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005325 	.word	0x08005325
 80052f8:	080053a1 	.word	0x080053a1
 80052fc:	08005393 	.word	0x08005393
 8005300:	08005393 	.word	0x08005393
 8005304:	08005393 	.word	0x08005393
 8005308:	08005393 	.word	0x08005393
 800530c:	08005393 	.word	0x08005393
 8005310:	08005393 	.word	0x08005393
 8005314:	08005393 	.word	0x08005393
 8005318:	08005393 	.word	0x08005393
 800531c:	0800534f 	.word	0x0800534f
 8005320:	08005379 	.word	0x08005379
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d107      	bne.n	8005340 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005330:	f107 030a 	add.w	r3, r7, #10
 8005334:	2202      	movs	r2, #2
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 fced 	bl	8006d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800533e:	e032      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fc77 	bl	8006c36 <USBD_CtlError>
            ret = USBD_FAIL;
 8005348:	2303      	movs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
          break;
 800534c:	e02b      	b.n	80053a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800535a:	f107 030d 	add.w	r3, r7, #13
 800535e:	2201      	movs	r2, #1
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 fcd8 	bl	8006d18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005368:	e01d      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fc62 	bl	8006c36 <USBD_CtlError>
            ret = USBD_FAIL;
 8005372:	2303      	movs	r3, #3
 8005374:	75fb      	strb	r3, [r7, #23]
          break;
 8005376:	e016      	b.n	80053a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b03      	cmp	r3, #3
 8005382:	d00f      	beq.n	80053a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fc55 	bl	8006c36 <USBD_CtlError>
            ret = USBD_FAIL;
 800538c:	2303      	movs	r3, #3
 800538e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005390:	e008      	b.n	80053a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 fc4e 	bl	8006c36 <USBD_CtlError>
          ret = USBD_FAIL;
 800539a:	2303      	movs	r3, #3
 800539c:	75fb      	strb	r3, [r7, #23]
          break;
 800539e:	e002      	b.n	80053a6 <USBD_CDC_Setup+0x19e>
          break;
 80053a0:	bf00      	nop
 80053a2:	e008      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>
          break;
 80053a4:	bf00      	nop
      }
      break;
 80053a6:	e006      	b.n	80053b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fc43 	bl	8006c36 <USBD_CtlError>
      ret = USBD_FAIL;
 80053b0:	2303      	movs	r3, #3
 80053b2:	75fb      	strb	r3, [r7, #23]
      break;
 80053b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	32b0      	adds	r2, #176	; 0xb0
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e065      	b.n	80054b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	32b0      	adds	r2, #176	; 0xb0
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3318      	adds	r3, #24
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d02f      	beq.n	8005474 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	3318      	adds	r3, #24
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	f003 010f 	and.w	r1, r3, #15
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	460b      	mov	r3, r1
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4403      	add	r3, r0
 800543c:	3348      	adds	r3, #72	; 0x48
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	fbb2 f1f3 	udiv	r1, r2, r3
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d112      	bne.n	8005474 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	f003 020f 	and.w	r2, r3, #15
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3318      	adds	r3, #24
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005466:	78f9      	ldrb	r1, [r7, #3]
 8005468:	2300      	movs	r3, #0
 800546a:	2200      	movs	r2, #0
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f002 f93e 	bl	80076ee <USBD_LL_Transmit>
 8005472:	e01f      	b.n	80054b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	33b0      	adds	r3, #176	; 0xb0
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	33b0      	adds	r3, #176	; 0xb0
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	32b0      	adds	r2, #176	; 0xb0
 80054d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	32b0      	adds	r2, #176	; 0xb0
 80054e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e01a      	b.n	8005526 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f002 f93c 	bl	8007772 <USBD_LL_GetRxDataSize>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	33b0      	adds	r3, #176	; 0xb0
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005520:	4611      	mov	r1, r2
 8005522:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	32b0      	adds	r2, #176	; 0xb0
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	e025      	b.n	800559c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	33b0      	adds	r3, #176	; 0xb0
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01a      	beq.n	800559a <USBD_CDC_EP0_RxReady+0x6c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	d015      	beq.n	800559a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	33b0      	adds	r3, #176	; 0xb0
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005586:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800558e:	b292      	uxth	r2, r2
 8005590:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055ac:	2182      	movs	r1, #130	; 0x82
 80055ae:	4818      	ldr	r0, [pc, #96]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055b0:	f000 fd09 	bl	8005fc6 <USBD_GetEpDesc>
 80055b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055b6:	2101      	movs	r1, #1
 80055b8:	4815      	ldr	r0, [pc, #84]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055ba:	f000 fd04 	bl	8005fc6 <USBD_GetEpDesc>
 80055be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055c0:	2181      	movs	r1, #129	; 0x81
 80055c2:	4813      	ldr	r0, [pc, #76]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055c4:	f000 fcff 	bl	8005fc6 <USBD_GetEpDesc>
 80055c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2210      	movs	r2, #16
 80055d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2200      	movs	r2, #0
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	711a      	strb	r2, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f8:	711a      	strb	r2, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2243      	movs	r2, #67	; 0x43
 8005602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	2000005c 	.word	0x2000005c

08005614 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800561c:	2182      	movs	r1, #130	; 0x82
 800561e:	4818      	ldr	r0, [pc, #96]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005620:	f000 fcd1 	bl	8005fc6 <USBD_GetEpDesc>
 8005624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005626:	2101      	movs	r1, #1
 8005628:	4815      	ldr	r0, [pc, #84]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800562a:	f000 fccc 	bl	8005fc6 <USBD_GetEpDesc>
 800562e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005630:	2181      	movs	r1, #129	; 0x81
 8005632:	4813      	ldr	r0, [pc, #76]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005634:	f000 fcc7 	bl	8005fc6 <USBD_GetEpDesc>
 8005638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2210      	movs	r2, #16
 8005644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f042 0202 	orr.w	r2, r2, #2
 8005658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	711a      	strb	r2, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f042 0202 	orr.w	r2, r2, #2
 800566c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2243      	movs	r2, #67	; 0x43
 8005672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000005c 	.word	0x2000005c

08005684 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800568c:	2182      	movs	r1, #130	; 0x82
 800568e:	4818      	ldr	r0, [pc, #96]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005690:	f000 fc99 	bl	8005fc6 <USBD_GetEpDesc>
 8005694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005696:	2101      	movs	r1, #1
 8005698:	4815      	ldr	r0, [pc, #84]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800569a:	f000 fc94 	bl	8005fc6 <USBD_GetEpDesc>
 800569e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056a0:	2181      	movs	r1, #129	; 0x81
 80056a2:	4813      	ldr	r0, [pc, #76]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056a4:	f000 fc8f 	bl	8005fc6 <USBD_GetEpDesc>
 80056a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2210      	movs	r2, #16
 80056b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2200      	movs	r2, #0
 80056c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c4:	711a      	strb	r2, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d8:	711a      	strb	r2, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2243      	movs	r2, #67	; 0x43
 80056e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000005c 	.word	0x2000005c

080056f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	220a      	movs	r2, #10
 8005700:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	20000018 	.word	0x20000018

08005714 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005724:	2303      	movs	r3, #3
 8005726:	e009      	b.n	800573c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	33b0      	adds	r3, #176	; 0xb0
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	32b0      	adds	r2, #176	; 0xb0
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800576a:	2303      	movs	r3, #3
 800576c:	e008      	b.n	8005780 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e004      	b.n	80057ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
	...

080057c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	32b0      	adds	r2, #176	; 0xb0
 80057da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	32b0      	adds	r2, #176	; 0xb0
 80057ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e018      	b.n	8005828 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7c1b      	ldrb	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <USBD_CDC_ReceivePacket+0x68>)
 8005800:	7819      	ldrb	r1, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 ff8f 	bl	8007730 <USBD_LL_PrepareReceive>
 8005812:	e008      	b.n	8005826 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <USBD_CDC_ReceivePacket+0x68>)
 8005816:	7819      	ldrb	r1, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 ff85 	bl	8007730 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200000a0 	.word	0x200000a0

08005834 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005848:	2303      	movs	r3, #3
 800584a:	e01f      	b.n	800588c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	79fa      	ldrb	r2, [r7, #7]
 800587e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f001 fdff 	bl	8007484 <USBD_LL_Init>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]

  return ret;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e025      	b.n	80058f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32ae      	adds	r2, #174	; 0xae
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00f      	beq.n	80058e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	32ae      	adds	r2, #174	; 0xae
 80058d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f107 020e 	add.w	r2, r7, #14
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fe07 	bl	800751c <USBD_LL_Start>
 800590e:	4603      	mov	r3, r0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	4611      	mov	r1, r2
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	4611      	mov	r1, r2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f908 	bl	8006bc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d01a      	beq.n	8005a0c <USBD_LL_SetupStage+0x72>
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d822      	bhi.n	8005a20 <USBD_LL_SetupStage+0x86>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <USBD_LL_SetupStage+0x4a>
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d00a      	beq.n	80059f8 <USBD_LL_SetupStage+0x5e>
 80059e2:	e01d      	b.n	8005a20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb5f 	bl	80060b0 <USBD_StdDevReq>
 80059f2:	4603      	mov	r3, r0
 80059f4:	73fb      	strb	r3, [r7, #15]
      break;
 80059f6:	e020      	b.n	8005a3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fbc7 	bl	8006194 <USBD_StdItfReq>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0a:	e016      	b.n	8005a3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fc29 	bl	800626c <USBD_StdEPReq>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1e:	e00c      	b.n	8005a3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fdd4 	bl	80075dc <USBD_LL_StallEP>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
      break;
 8005a38:	bf00      	nop
  }

  return ret;
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a56:	7afb      	ldrb	r3, [r7, #11]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d16e      	bne.n	8005b3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	f040 8098 	bne.w	8005ba0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d913      	bls.n	8005aa4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	1ad2      	subs	r2, r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bf28      	it	cs
 8005a96:	4613      	movcs	r3, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 f984 	bl	8006daa <USBD_CtlContinueRx>
 8005aa2:	e07d      	b.n	8005ba0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d014      	beq.n	8005adc <USBD_LL_DataOutStage+0x98>
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d81d      	bhi.n	8005af2 <USBD_LL_DataOutStage+0xae>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <USBD_LL_DataOutStage+0x7c>
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d003      	beq.n	8005ac6 <USBD_LL_DataOutStage+0x82>
 8005abe:	e018      	b.n	8005af2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	75bb      	strb	r3, [r7, #22]
            break;
 8005ac4:	e018      	b.n	8005af8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fa5e 	bl	8005f92 <USBD_CoreFindIF>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75bb      	strb	r3, [r7, #22]
            break;
 8005ada:	e00d      	b.n	8005af8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fa60 	bl	8005fac <USBD_CoreFindEP>
 8005aec:	4603      	mov	r3, r0
 8005aee:	75bb      	strb	r3, [r7, #22]
            break;
 8005af0:	e002      	b.n	8005af8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75bb      	strb	r3, [r7, #22]
            break;
 8005af6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005af8:	7dbb      	ldrb	r3, [r7, #22]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d119      	bne.n	8005b32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d113      	bne.n	8005b32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b0a:	7dba      	ldrb	r2, [r7, #22]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	32ae      	adds	r2, #174	; 0xae
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00b      	beq.n	8005b32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b1a:	7dba      	ldrb	r2, [r7, #22]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b22:	7dba      	ldrb	r2, [r7, #22]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	32ae      	adds	r2, #174	; 0xae
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f001 f94a 	bl	8006dcc <USBD_CtlSendStatus>
 8005b38:	e032      	b.n	8005ba0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	4619      	mov	r1, r3
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fa31 	bl	8005fac <USBD_CoreFindEP>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b4e:	7dbb      	ldrb	r3, [r7, #22]
 8005b50:	2bff      	cmp	r3, #255	; 0xff
 8005b52:	d025      	beq.n	8005ba0 <USBD_LL_DataOutStage+0x15c>
 8005b54:	7dbb      	ldrb	r3, [r7, #22]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d122      	bne.n	8005ba0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d117      	bne.n	8005b96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b66:	7dba      	ldrb	r2, [r7, #22]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	32ae      	adds	r2, #174	; 0xae
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00f      	beq.n	8005b96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b76:	7dba      	ldrb	r2, [r7, #22]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b7e:	7dba      	ldrb	r2, [r7, #22]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	32ae      	adds	r2, #174	; 0xae
 8005b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	7afa      	ldrb	r2, [r7, #11]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	4798      	blx	r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	e000      	b.n	8005ba2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d16f      	bne.n	8005c9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d15a      	bne.n	8005c84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d914      	bls.n	8005c04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f001 f8ac 	bl	8006d4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f001 fd97 	bl	8007730 <USBD_LL_PrepareReceive>
 8005c02:	e03f      	b.n	8005c84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11c      	bne.n	8005c4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d316      	bcc.n	8005c4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d20f      	bcs.n	8005c4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 f88d 	bl	8006d4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 fd74 	bl	8007730 <USBD_LL_PrepareReceive>
 8005c48:	e01c      	b.n	8005c84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d10f      	bne.n	8005c76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f001 fcaf 	bl	80075dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f001 f8b7 	bl	8006df2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03a      	beq.n	8005d04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff fe42 	bl	8005918 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c9c:	e032      	b.n	8005d04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f97f 	bl	8005fac <USBD_CoreFindEP>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2bff      	cmp	r3, #255	; 0xff
 8005cb6:	d025      	beq.n	8005d04 <USBD_LL_DataInStage+0x15a>
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d122      	bne.n	8005d04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d11c      	bne.n	8005d04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cca:	7dfa      	ldrb	r2, [r7, #23]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	32ae      	adds	r2, #174	; 0xae
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d014      	beq.n	8005d04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005cda:	7dfa      	ldrb	r2, [r7, #23]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ce2:	7dfa      	ldrb	r2, [r7, #23]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	32ae      	adds	r2, #174	; 0xae
 8005ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	7afa      	ldrb	r2, [r7, #11]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d00:	7dbb      	ldrb	r3, [r7, #22]
 8005d02:	e000      	b.n	8005d06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d014      	beq.n	8005d74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6852      	ldr	r2, [r2, #4]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	4611      	mov	r1, r2
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fbe9 	bl	8007552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2240      	movs	r2, #64	; 0x40
 8005d8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	2200      	movs	r2, #0
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fbdb 	bl	8007552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2240      	movs	r2, #64	; 0x40
 8005da6:	621a      	str	r2, [r3, #32]

  return ret;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2204      	movs	r2, #4
 8005dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d106      	bne.n	8005e20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d110      	bne.n	8005e64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	32ae      	adds	r2, #174	; 0xae
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01c      	b.n	8005eca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d115      	bne.n	8005ec8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	; 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	32ae      	adds	r2, #174	; 0xae
 8005eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	32ae      	adds	r2, #174	; 0xae
 8005ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e01c      	b.n	8005f2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d115      	bne.n	8005f2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32ae      	adds	r2, #174	; 0xae
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	4611      	mov	r1, r2
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6852      	ldr	r2, [r2, #4]
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	4611      	mov	r1, r2
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	885b      	ldrh	r3, [r3, #2]
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d920      	bls.n	8006030 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ff6:	e013      	b.n	8006020 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ff8:	f107 030a 	add.w	r3, r7, #10
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f000 f81b 	bl	800603a <USBD_GetNextDesc>
 8006004:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d108      	bne.n	8006020 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	429a      	cmp	r2, r3
 800601a:	d008      	beq.n	800602e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	885b      	ldrh	r3, [r3, #2]
 8006024:	b29a      	uxth	r2, r3
 8006026:	897b      	ldrh	r3, [r7, #10]
 8006028:	429a      	cmp	r2, r3
 800602a:	d8e5      	bhi.n	8005ff8 <USBD_GetEpDesc+0x32>
 800602c:	e000      	b.n	8006030 <USBD_GetEpDesc+0x6a>
          break;
 800602e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006030:	693b      	ldr	r3, [r7, #16]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	881a      	ldrh	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	4413      	add	r3, r2
 8006054:	b29a      	uxth	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3301      	adds	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006092:	8a3b      	ldrh	r3, [r7, #16]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	b21a      	sxth	r2, r3
 8006098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800609c:	4313      	orrs	r3, r2
 800609e:	b21b      	sxth	r3, r3
 80060a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060a2:	89fb      	ldrh	r3, [r7, #14]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d005      	beq.n	80060d6 <USBD_StdDevReq+0x26>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d857      	bhi.n	800617e <USBD_StdDevReq+0xce>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <USBD_StdDevReq+0x42>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d153      	bne.n	800617e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	32ae      	adds	r2, #174	; 0xae
 80060e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e04a      	b.n	8006188 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d83b      	bhi.n	8006172 <USBD_StdDevReq+0xc2>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <USBD_StdDevReq+0x50>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006155 	.word	0x08006155
 8006104:	08006169 	.word	0x08006169
 8006108:	08006173 	.word	0x08006173
 800610c:	0800615f 	.word	0x0800615f
 8006110:	08006173 	.word	0x08006173
 8006114:	08006133 	.word	0x08006133
 8006118:	08006129 	.word	0x08006129
 800611c:	08006173 	.word	0x08006173
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800613d 	.word	0x0800613d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa3c 	bl	80065a8 <USBD_GetDescriptor>
          break;
 8006130:	e024      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fba1 	bl	800687c <USBD_SetAddress>
          break;
 800613a:	e01f      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fbe0 	bl	8006904 <USBD_SetConfig>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
          break;
 8006148:	e018      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc83 	bl	8006a58 <USBD_GetConfig>
          break;
 8006152:	e013      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fcb4 	bl	8006ac4 <USBD_GetStatus>
          break;
 800615c:	e00e      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fce3 	bl	8006b2c <USBD_SetFeature>
          break;
 8006166:	e009      	b.n	800617c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fd07 	bl	8006b7e <USBD_ClrFeature>
          break;
 8006170:	e004      	b.n	800617c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd5e 	bl	8006c36 <USBD_CtlError>
          break;
 800617a:	bf00      	nop
      }
      break;
 800617c:	e004      	b.n	8006188 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fd58 	bl	8006c36 <USBD_CtlError>
      break;
 8006186:	bf00      	nop
  }

  return ret;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d005      	beq.n	80061ba <USBD_StdItfReq+0x26>
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d852      	bhi.n	8006258 <USBD_StdItfReq+0xc4>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <USBD_StdItfReq+0x26>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d14e      	bne.n	8006258 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d840      	bhi.n	800624a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	889b      	ldrh	r3, [r3, #4]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d836      	bhi.n	8006240 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	889b      	ldrh	r3, [r3, #4]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fed9 	bl	8005f92 <USBD_CoreFindIF>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2bff      	cmp	r3, #255	; 0xff
 80061e8:	d01d      	beq.n	8006226 <USBD_StdItfReq+0x92>
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11a      	bne.n	8006226 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061f0:	7bba      	ldrb	r2, [r7, #14]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32ae      	adds	r2, #174	; 0xae
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006200:	7bba      	ldrb	r2, [r7, #14]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006208:	7bba      	ldrb	r2, [r7, #14]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32ae      	adds	r2, #174	; 0xae
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	4603      	mov	r3, r0
 800621c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800621e:	e004      	b.n	800622a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006224:	e001      	b.n	800622a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006226:	2303      	movs	r3, #3
 8006228:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	88db      	ldrh	r3, [r3, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d110      	bne.n	8006254 <USBD_StdItfReq+0xc0>
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10d      	bne.n	8006254 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fdc7 	bl	8006dcc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800623e:	e009      	b.n	8006254 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fcf7 	bl	8006c36 <USBD_CtlError>
          break;
 8006248:	e004      	b.n	8006254 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fcf2 	bl	8006c36 <USBD_CtlError>
          break;
 8006252:	e000      	b.n	8006256 <USBD_StdItfReq+0xc2>
          break;
 8006254:	bf00      	nop
      }
      break;
 8006256:	e004      	b.n	8006262 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fceb 	bl	8006c36 <USBD_CtlError>
      break;
 8006260:	bf00      	nop
  }

  return ret;
 8006262:	7bfb      	ldrb	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	889b      	ldrh	r3, [r3, #4]
 800627e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d007      	beq.n	800629c <USBD_StdEPReq+0x30>
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	f200 817f 	bhi.w	8006590 <USBD_StdEPReq+0x324>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d02a      	beq.n	80062ec <USBD_StdEPReq+0x80>
 8006296:	2b20      	cmp	r3, #32
 8006298:	f040 817a 	bne.w	8006590 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fe83 	bl	8005fac <USBD_CoreFindEP>
 80062a6:	4603      	mov	r3, r0
 80062a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062aa:	7b7b      	ldrb	r3, [r7, #13]
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	f000 8174 	beq.w	800659a <USBD_StdEPReq+0x32e>
 80062b2:	7b7b      	ldrb	r3, [r7, #13]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8170 	bne.w	800659a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062ba:	7b7a      	ldrb	r2, [r7, #13]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062c2:	7b7a      	ldrb	r2, [r7, #13]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	32ae      	adds	r2, #174	; 0xae
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8163 	beq.w	800659a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062d4:	7b7a      	ldrb	r2, [r7, #13]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	32ae      	adds	r2, #174	; 0xae
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ea:	e156      	b.n	800659a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d008      	beq.n	8006306 <USBD_StdEPReq+0x9a>
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	f300 8145 	bgt.w	8006584 <USBD_StdEPReq+0x318>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 809b 	beq.w	8006436 <USBD_StdEPReq+0x1ca>
 8006300:	2b01      	cmp	r3, #1
 8006302:	d03c      	beq.n	800637e <USBD_StdEPReq+0x112>
 8006304:	e13e      	b.n	8006584 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d002      	beq.n	8006318 <USBD_StdEPReq+0xac>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d016      	beq.n	8006344 <USBD_StdEPReq+0xd8>
 8006316:	e02c      	b.n	8006372 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <USBD_StdEPReq+0xce>
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d00a      	beq.n	800633a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f957 	bl	80075dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 f953 	bl	80075dc <USBD_LL_StallEP>
 8006336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006338:	e020      	b.n	800637c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc7a 	bl	8006c36 <USBD_CtlError>
              break;
 8006342:	e01b      	b.n	800637c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <USBD_StdEPReq+0xfe>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d008      	beq.n	800636a <USBD_StdEPReq+0xfe>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	88db      	ldrh	r3, [r3, #6]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f939 	bl	80075dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fd2e 	bl	8006dcc <USBD_CtlSendStatus>

              break;
 8006370:	e004      	b.n	800637c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fc5e 	bl	8006c36 <USBD_CtlError>
              break;
 800637a:	bf00      	nop
          }
          break;
 800637c:	e107      	b.n	800658e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d002      	beq.n	8006390 <USBD_StdEPReq+0x124>
 800638a:	2b03      	cmp	r3, #3
 800638c:	d016      	beq.n	80063bc <USBD_StdEPReq+0x150>
 800638e:	e04b      	b.n	8006428 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <USBD_StdEPReq+0x146>
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d00a      	beq.n	80063b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f91b 	bl	80075dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f917 	bl	80075dc <USBD_LL_StallEP>
 80063ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063b0:	e040      	b.n	8006434 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fc3e 	bl	8006c36 <USBD_CtlError>
              break;
 80063ba:	e03b      	b.n	8006434 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d136      	bne.n	8006432 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ce:	7bbb      	ldrb	r3, [r7, #14]
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 f921 	bl	800761a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fcf7 	bl	8006dcc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fde2 	bl	8005fac <USBD_CoreFindEP>
 80063e8:	4603      	mov	r3, r0
 80063ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063ec:	7b7b      	ldrb	r3, [r7, #13]
 80063ee:	2bff      	cmp	r3, #255	; 0xff
 80063f0:	d01f      	beq.n	8006432 <USBD_StdEPReq+0x1c6>
 80063f2:	7b7b      	ldrb	r3, [r7, #13]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11c      	bne.n	8006432 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063f8:	7b7a      	ldrb	r2, [r7, #13]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006410:	7b7a      	ldrb	r2, [r7, #13]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32ae      	adds	r2, #174	; 0xae
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006426:	e004      	b.n	8006432 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fc03 	bl	8006c36 <USBD_CtlError>
              break;
 8006430:	e000      	b.n	8006434 <USBD_StdEPReq+0x1c8>
              break;
 8006432:	bf00      	nop
          }
          break;
 8006434:	e0ab      	b.n	800658e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d002      	beq.n	8006448 <USBD_StdEPReq+0x1dc>
 8006442:	2b03      	cmp	r3, #3
 8006444:	d032      	beq.n	80064ac <USBD_StdEPReq+0x240>
 8006446:	e097      	b.n	8006578 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d007      	beq.n	800645e <USBD_StdEPReq+0x1f2>
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b80      	cmp	r3, #128	; 0x80
 8006452:	d004      	beq.n	800645e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fbed 	bl	8006c36 <USBD_CtlError>
                break;
 800645c:	e091      	b.n	8006582 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800645e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006462:	2b00      	cmp	r3, #0
 8006464:	da0b      	bge.n	800647e <USBD_StdEPReq+0x212>
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	3310      	adds	r3, #16
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	e00b      	b.n	8006496 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	3304      	adds	r3, #4
 8006496:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2202      	movs	r2, #2
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fc37 	bl	8006d18 <USBD_CtlSendData>
              break;
 80064aa:	e06a      	b.n	8006582 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da11      	bge.n	80064d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d117      	bne.n	80064fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fbb0 	bl	8006c36 <USBD_CtlError>
                  break;
 80064d6:	e054      	b.n	8006582 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	f003 020f 	and.w	r2, r3, #15
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fb9d 	bl	8006c36 <USBD_CtlError>
                  break;
 80064fc:	e041      	b.n	8006582 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da0b      	bge.n	800651e <USBD_StdEPReq+0x2b2>
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	3310      	adds	r3, #16
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	3304      	adds	r3, #4
 800651c:	e00b      	b.n	8006536 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	3304      	adds	r3, #4
 8006536:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <USBD_StdEPReq+0x2d8>
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d103      	bne.n	800654c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e00e      	b.n	800656a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 f881 	bl	8007658 <USBD_LL_IsStallEP>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e002      	b.n	800656a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2202      	movs	r2, #2
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fbd1 	bl	8006d18 <USBD_CtlSendData>
              break;
 8006576:	e004      	b.n	8006582 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb5b 	bl	8006c36 <USBD_CtlError>
              break;
 8006580:	bf00      	nop
          }
          break;
 8006582:	e004      	b.n	800658e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb55 	bl	8006c36 <USBD_CtlError>
          break;
 800658c:	bf00      	nop
      }
      break;
 800658e:	e005      	b.n	800659c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb4f 	bl	8006c36 <USBD_CtlError>
      break;
 8006598:	e000      	b.n	800659c <USBD_StdEPReq+0x330>
      break;
 800659a:	bf00      	nop
  }

  return ret;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	2b06      	cmp	r3, #6
 80065ca:	f200 8128 	bhi.w	800681e <USBD_GetDescriptor+0x276>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <USBD_GetDescriptor+0x2c>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065f1 	.word	0x080065f1
 80065d8:	08006609 	.word	0x08006609
 80065dc:	08006649 	.word	0x08006649
 80065e0:	0800681f 	.word	0x0800681f
 80065e4:	0800681f 	.word	0x0800681f
 80065e8:	080067bf 	.word	0x080067bf
 80065ec:	080067eb 	.word	0x080067eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
      break;
 8006606:	e112      	b.n	800682e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7c1b      	ldrb	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	f107 0208 	add.w	r2, r7, #8
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
 8006620:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	2202      	movs	r2, #2
 8006628:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800662a:	e100      	b.n	800682e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	f107 0208 	add.w	r2, r7, #8
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
 800663c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	2202      	movs	r2, #2
 8006644:	701a      	strb	r2, [r3, #0]
      break;
 8006646:	e0f2      	b.n	800682e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	885b      	ldrh	r3, [r3, #2]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b05      	cmp	r3, #5
 8006650:	f200 80ac 	bhi.w	80067ac <USBD_GetDescriptor+0x204>
 8006654:	a201      	add	r2, pc, #4	; (adr r2, 800665c <USBD_GetDescriptor+0xb4>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	08006675 	.word	0x08006675
 8006660:	080066a9 	.word	0x080066a9
 8006664:	080066dd 	.word	0x080066dd
 8006668:	08006711 	.word	0x08006711
 800666c:	08006745 	.word	0x08006745
 8006670:	08006779 	.word	0x08006779
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	f107 0108 	add.w	r1, r7, #8
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006696:	e091      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 facb 	bl	8006c36 <USBD_CtlError>
            err++;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	3301      	adds	r3, #1
 80066a4:	72fb      	strb	r3, [r7, #11]
          break;
 80066a6:	e089      	b.n	80067bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	f107 0108 	add.w	r1, r7, #8
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ca:	e077      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fab1 	bl	8006c36 <USBD_CtlError>
            err++;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	3301      	adds	r3, #1
 80066d8:	72fb      	strb	r3, [r7, #11]
          break;
 80066da:	e06f      	b.n	80067bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fe:	e05d      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa97 	bl	8006c36 <USBD_CtlError>
            err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
          break;
 800670e:	e055      	b.n	80067bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006732:	e043      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa7d 	bl	8006c36 <USBD_CtlError>
            err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
          break;
 8006742:	e03b      	b.n	80067bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 0108 	add.w	r1, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006766:	e029      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa63 	bl	8006c36 <USBD_CtlError>
            err++;
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	3301      	adds	r3, #1
 8006774:	72fb      	strb	r3, [r7, #11]
          break;
 8006776:	e021      	b.n	80067bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7c12      	ldrb	r2, [r2, #16]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679a:	e00f      	b.n	80067bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa49 	bl	8006c36 <USBD_CtlError>
            err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
          break;
 80067aa:	e007      	b.n	80067bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa41 	bl	8006c36 <USBD_CtlError>
          err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067ba:	bf00      	nop
      }
      break;
 80067bc:	e037      	b.n	800682e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	7c1b      	ldrb	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d109      	bne.n	80067da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ce:	f107 0208 	add.w	r2, r7, #8
 80067d2:	4610      	mov	r0, r2
 80067d4:	4798      	blx	r3
 80067d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d8:	e029      	b.n	800682e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fa2a 	bl	8006c36 <USBD_CtlError>
        err++;
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	3301      	adds	r3, #1
 80067e6:	72fb      	strb	r3, [r7, #11]
      break;
 80067e8:	e021      	b.n	800682e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	7c1b      	ldrb	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	f107 0208 	add.w	r2, r7, #8
 80067fe:	4610      	mov	r0, r2
 8006800:	4798      	blx	r3
 8006802:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	2207      	movs	r2, #7
 800680a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800680c:	e00f      	b.n	800682e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa10 	bl	8006c36 <USBD_CtlError>
        err++;
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	3301      	adds	r3, #1
 800681a:	72fb      	strb	r3, [r7, #11]
      break;
 800681c:	e007      	b.n	800682e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa08 	bl	8006c36 <USBD_CtlError>
      err++;
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	3301      	adds	r3, #1
 800682a:	72fb      	strb	r3, [r7, #11]
      break;
 800682c:	bf00      	nop
  }

  if (err != 0U)
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11e      	bne.n	8006872 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	88db      	ldrh	r3, [r3, #6]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d016      	beq.n	800686a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800683c:	893b      	ldrh	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00e      	beq.n	8006860 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	88da      	ldrh	r2, [r3, #6]
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	4293      	cmp	r3, r2
 800684a:	bf28      	it	cs
 800684c:	4613      	movcs	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006852:	893b      	ldrh	r3, [r7, #8]
 8006854:	461a      	mov	r2, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa5d 	bl	8006d18 <USBD_CtlSendData>
 800685e:	e009      	b.n	8006874 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9e7 	bl	8006c36 <USBD_CtlError>
 8006868:	e004      	b.n	8006874 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 faae 	bl	8006dcc <USBD_CtlSendStatus>
 8006870:	e000      	b.n	8006874 <USBD_GetDescriptor+0x2cc>
    return;
 8006872:	bf00      	nop
  }
}
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop

0800687c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	889b      	ldrh	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d131      	bne.n	80068f2 <USBD_SetAddress+0x76>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	88db      	ldrh	r3, [r3, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d12d      	bne.n	80068f2 <USBD_SetAddress+0x76>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	2b7f      	cmp	r3, #127	; 0x7f
 800689c:	d829      	bhi.n	80068f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	885b      	ldrh	r3, [r3, #2]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d104      	bne.n	80068c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f9bc 	bl	8006c36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	e01d      	b.n	80068fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7bfa      	ldrb	r2, [r7, #15]
 80068c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 feef 	bl	80076b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa7a 	bl	8006dcc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e6:	e009      	b.n	80068fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f0:	e004      	b.n	80068fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f99e 	bl	8006c36 <USBD_CtlError>
  }
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	885b      	ldrh	r3, [r3, #2]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4b4e      	ldr	r3, [pc, #312]	; (8006a54 <USBD_SetConfig+0x150>)
 800691a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800691c:	4b4d      	ldr	r3, [pc, #308]	; (8006a54 <USBD_SetConfig+0x150>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d905      	bls.n	8006930 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f985 	bl	8006c36 <USBD_CtlError>
    return USBD_FAIL;
 800692c:	2303      	movs	r3, #3
 800692e:	e08c      	b.n	8006a4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d002      	beq.n	8006942 <USBD_SetConfig+0x3e>
 800693c:	2b03      	cmp	r3, #3
 800693e:	d029      	beq.n	8006994 <USBD_SetConfig+0x90>
 8006940:	e075      	b.n	8006a2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006942:	4b44      	ldr	r3, [pc, #272]	; (8006a54 <USBD_SetConfig+0x150>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d020      	beq.n	800698c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800694a:	4b42      	ldr	r3, [pc, #264]	; (8006a54 <USBD_SetConfig+0x150>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006954:	4b3f      	ldr	r3, [pc, #252]	; (8006a54 <USBD_SetConfig+0x150>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fe ffe7 	bl	800592e <USBD_SetClassConfig>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f962 	bl	8006c36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800697a:	e065      	b.n	8006a48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa25 	bl	8006dcc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2203      	movs	r2, #3
 8006986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800698a:	e05d      	b.n	8006a48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa1d 	bl	8006dcc <USBD_CtlSendStatus>
      break;
 8006992:	e059      	b.n	8006a48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006994:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <USBD_SetConfig+0x150>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d112      	bne.n	80069c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <USBD_SetConfig+0x150>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <USBD_SetConfig+0x150>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe ffd6 	bl	8005966 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa06 	bl	8006dcc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069c0:	e042      	b.n	8006a48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <USBD_SetConfig+0x150>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d02a      	beq.n	8006a26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fe ffc4 	bl	8005966 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069de:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <USBD_SetConfig+0x150>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e8:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <USBD_SetConfig+0x150>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fe ff9d 	bl	800592e <USBD_SetClassConfig>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00f      	beq.n	8006a1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f918 	bl	8006c36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe ffa9 	bl	8005966 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a1c:	e014      	b.n	8006a48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9d4 	bl	8006dcc <USBD_CtlSendStatus>
      break;
 8006a24:	e010      	b.n	8006a48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9d0 	bl	8006dcc <USBD_CtlSendStatus>
      break;
 8006a2c:	e00c      	b.n	8006a48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f900 	bl	8006c36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <USBD_SetConfig+0x150>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7fe ff92 	bl	8005966 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	73fb      	strb	r3, [r7, #15]
      break;
 8006a46:	bf00      	nop
  }

  return ret;
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200001e0 	.word	0x200001e0

08006a58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d004      	beq.n	8006a74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8e2 	bl	8006c36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a72:	e023      	b.n	8006abc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	dc02      	bgt.n	8006a86 <USBD_GetConfig+0x2e>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc03      	bgt.n	8006a8c <USBD_GetConfig+0x34>
 8006a84:	e015      	b.n	8006ab2 <USBD_GetConfig+0x5a>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d00b      	beq.n	8006aa2 <USBD_GetConfig+0x4a>
 8006a8a:	e012      	b.n	8006ab2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3308      	adds	r3, #8
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f93c 	bl	8006d18 <USBD_CtlSendData>
        break;
 8006aa0:	e00c      	b.n	8006abc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f934 	bl	8006d18 <USBD_CtlSendData>
        break;
 8006ab0:	e004      	b.n	8006abc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8be 	bl	8006c36 <USBD_CtlError>
        break;
 8006aba:	bf00      	nop
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d81e      	bhi.n	8006b1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d004      	beq.n	8006aee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8a5 	bl	8006c36 <USBD_CtlError>
        break;
 8006aec:	e01a      	b.n	8006b24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	2202      	movs	r2, #2
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f900 	bl	8006d18 <USBD_CtlSendData>
      break;
 8006b18:	e004      	b.n	8006b24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f88a 	bl	8006c36 <USBD_CtlError>
      break;
 8006b22:	bf00      	nop
  }
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d107      	bne.n	8006b4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f940 	bl	8006dcc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b4c:	e013      	b.n	8006b76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d10b      	bne.n	8006b6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	889b      	ldrh	r3, [r3, #4]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f930 	bl	8006dcc <USBD_CtlSendStatus>
}
 8006b6c:	e003      	b.n	8006b76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f860 	bl	8006c36 <USBD_CtlError>
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d80b      	bhi.n	8006bae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d10c      	bne.n	8006bb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f910 	bl	8006dcc <USBD_CtlSendStatus>
      }
      break;
 8006bac:	e004      	b.n	8006bb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f840 	bl	8006c36 <USBD_CtlError>
      break;
 8006bb6:	e000      	b.n	8006bba <USBD_ClrFeature+0x3c>
      break;
 8006bb8:	bf00      	nop
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fa41 	bl	8006074 <SWAPBYTE>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fa34 	bl	8006074 <SWAPBYTE>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fa27 	bl	8006074 <SWAPBYTE>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	80da      	strh	r2, [r3, #6]
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c40:	2180      	movs	r1, #128	; 0x80
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fcca 	bl	80075dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fcc6 	bl	80075dc <USBD_LL_StallEP>
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d036      	beq.n	8006cdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c72:	6938      	ldr	r0, [r7, #16]
 8006c74:	f000 f836 	bl	8006ce4 <USBD_GetLen>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	3301      	adds	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ca8:	e013      	b.n	8006cd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	4413      	add	r3, r2
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	7812      	ldrb	r2, [r2, #0]
 8006cb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	613b      	str	r3, [r7, #16]
    idx++;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e7      	bne.n	8006caa <USBD_GetString+0x52>
 8006cda:	e000      	b.n	8006cde <USBD_GetString+0x86>
    return;
 8006cdc:	bf00      	nop
  }
}
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cf4:	e005      	b.n	8006d02 <USBD_GetLen+0x1e>
  {
    len++;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f5      	bne.n	8006cf6 <USBD_GetLen+0x12>
  }

  return len;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fcd5 	bl	80076ee <USBD_LL_Transmit>

  return USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fcc4 	bl	80076ee <USBD_LL_Transmit>

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fcc8 	bl	8007730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	2100      	movs	r1, #0
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fcb7 	bl	8007730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fc83 	bl	80076ee <USBD_LL_Transmit>

  return USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc91 	bl	8007730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4912      	ldr	r1, [pc, #72]	; (8006e68 <MX_USB_DEVICE_Init+0x50>)
 8006e20:	4812      	ldr	r0, [pc, #72]	; (8006e6c <MX_USB_DEVICE_Init+0x54>)
 8006e22:	f7fe fd07 	bl	8005834 <USBD_Init>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e2c:	f7f9 fe68 	bl	8000b00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e30:	490f      	ldr	r1, [pc, #60]	; (8006e70 <MX_USB_DEVICE_Init+0x58>)
 8006e32:	480e      	ldr	r0, [pc, #56]	; (8006e6c <MX_USB_DEVICE_Init+0x54>)
 8006e34:	f7fe fd2e 	bl	8005894 <USBD_RegisterClass>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e3e:	f7f9 fe5f 	bl	8000b00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e42:	490c      	ldr	r1, [pc, #48]	; (8006e74 <MX_USB_DEVICE_Init+0x5c>)
 8006e44:	4809      	ldr	r0, [pc, #36]	; (8006e6c <MX_USB_DEVICE_Init+0x54>)
 8006e46:	f7fe fc65 	bl	8005714 <USBD_CDC_RegisterInterface>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e50:	f7f9 fe56 	bl	8000b00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e54:	4805      	ldr	r0, [pc, #20]	; (8006e6c <MX_USB_DEVICE_Init+0x54>)
 8006e56:	f7fe fd53 	bl	8005900 <USBD_Start>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e60:	f7f9 fe4e 	bl	8000b00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e64:	bf00      	nop
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200000b8 	.word	0x200000b8
 8006e6c:	200001e4 	.word	0x200001e4
 8006e70:	20000024 	.word	0x20000024
 8006e74:	200000a4 	.word	0x200000a4

08006e78 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4905      	ldr	r1, [pc, #20]	; (8006e94 <CDC_Init_FS+0x1c>)
 8006e80:	4805      	ldr	r0, [pc, #20]	; (8006e98 <CDC_Init_FS+0x20>)
 8006e82:	f7fe fc61 	bl	8005748 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e86:	4905      	ldr	r1, [pc, #20]	; (8006e9c <CDC_Init_FS+0x24>)
 8006e88:	4803      	ldr	r0, [pc, #12]	; (8006e98 <CDC_Init_FS+0x20>)
 8006e8a:	f7fe fc7f 	bl	800578c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000cc0 	.word	0x20000cc0
 8006e98:	200001e4 	.word	0x200001e4
 8006e9c:	200004c0 	.word	0x200004c0

08006ea0 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ea4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	71fb      	strb	r3, [r7, #7]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b23      	cmp	r3, #35	; 0x23
 8006ec4:	d84a      	bhi.n	8006f5c <CDC_Control_FS+0xac>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <CDC_Control_FS+0x1c>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f5d 	.word	0x08006f5d
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f5d 	.word	0x08006f5d
 8006ed8:	08006f5d 	.word	0x08006f5d
 8006edc:	08006f5d 	.word	0x08006f5d
 8006ee0:	08006f5d 	.word	0x08006f5d
 8006ee4:	08006f5d 	.word	0x08006f5d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f5d 	.word	0x08006f5d
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	08006f5d 	.word	0x08006f5d
 8006ef8:	08006f5d 	.word	0x08006f5d
 8006efc:	08006f5d 	.word	0x08006f5d
 8006f00:	08006f5d 	.word	0x08006f5d
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	08006f5d 	.word	0x08006f5d
 8006f10:	08006f5d 	.word	0x08006f5d
 8006f14:	08006f5d 	.word	0x08006f5d
 8006f18:	08006f5d 	.word	0x08006f5d
 8006f1c:	08006f5d 	.word	0x08006f5d
 8006f20:	08006f5d 	.word	0x08006f5d
 8006f24:	08006f5d 	.word	0x08006f5d
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f5d 	.word	0x08006f5d
 8006f40:	08006f5d 	.word	0x08006f5d
 8006f44:	08006f5d 	.word	0x08006f5d
 8006f48:	08006f5d 	.word	0x08006f5d
 8006f4c:	08006f5d 	.word	0x08006f5d
 8006f50:	08006f5d 	.word	0x08006f5d
 8006f54:	08006f5d 	.word	0x08006f5d
 8006f58:	08006f5d 	.word	0x08006f5d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f5c:	bf00      	nop
  }

  return (USBD_OK);
 8006f5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4810      	ldr	r0, [pc, #64]	; (8006fbc <CDC_Receive_FS+0x50>)
 8006f7a:	f7fe fc07 	bl	800578c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f7e:	480f      	ldr	r0, [pc, #60]	; (8006fbc <CDC_Receive_FS+0x50>)
 8006f80:	f7fe fc22 	bl	80057c8 <USBD_CDC_ReceivePacket>

  // Check if main is still processing or not
  if (bufferSet == 1)
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <CDC_Receive_FS+0x54>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d112      	bne.n	8006fb2 <CDC_Receive_FS+0x46>
  {
    memcpy(receiveBuffer, Buf, (uint8_t)*Len); // Copy the data to our extern buffer
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	480b      	ldr	r0, [pc, #44]	; (8006fc4 <CDC_Receive_FS+0x58>)
 8006f98:	f000 fc66 	bl	8007868 <memcpy>
    memset(Buf, '\0', (uint8_t)*Len);          // Clear Buf
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc6c 	bl	8007884 <memset>
    bufferSet = 1;                             // Indicate that our buffer was set
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <CDC_Receive_FS+0x54>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  return (USBD_OK);
 8006fb2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200001e4 	.word	0x200001e4
 8006fc0:	200001d8 	.word	0x200001d8
 8006fc4:	200001d4 	.word	0x200001d4

08006fc8 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2212      	movs	r2, #18
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	200000d4 	.word	0x200000d4

08007010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	6039      	str	r1, [r7, #0]
 800701a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2204      	movs	r2, #4
 8007020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007022:	4b03      	ldr	r3, [pc, #12]	; (8007030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	200000e8 	.word	0x200000e8

08007034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4907      	ldr	r1, [pc, #28]	; (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
 800704a:	4808      	ldr	r0, [pc, #32]	; (800706c <USBD_FS_ProductStrDescriptor+0x38>)
 800704c:	f7ff fe04 	bl	8006c58 <USBD_GetString>
 8007050:	e004      	b.n	800705c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4904      	ldr	r1, [pc, #16]	; (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
 8007056:	4805      	ldr	r0, [pc, #20]	; (800706c <USBD_FS_ProductStrDescriptor+0x38>)
 8007058:	f7ff fdfe 	bl	8006c58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200014c0 	.word	0x200014c0
 800706c:	080078ac 	.word	0x080078ac

08007070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	4904      	ldr	r1, [pc, #16]	; (8007090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007080:	4804      	ldr	r0, [pc, #16]	; (8007094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007082:	f7ff fde9 	bl	8006c58 <USBD_GetString>
  return USBD_StrDesc;
 8007086:	4b02      	ldr	r3, [pc, #8]	; (8007090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	200014c0 	.word	0x200014c0
 8007094:	080078c4 	.word	0x080078c4

08007098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	221a      	movs	r2, #26
 80070a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070aa:	f000 f843 	bl	8007134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070ae:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200000ec 	.word	0x200000ec

080070bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070d2:	4808      	ldr	r0, [pc, #32]	; (80070f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d4:	f7ff fdc0 	bl	8006c58 <USBD_GetString>
 80070d8:	e004      	b.n	80070e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070e0:	f7ff fdba 	bl	8006c58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	200014c0 	.word	0x200014c0
 80070f4:	080078d8 	.word	0x080078d8

080070f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4907      	ldr	r1, [pc, #28]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710e:	4808      	ldr	r0, [pc, #32]	; (8007130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007110:	f7ff fda2 	bl	8006c58 <USBD_GetString>
 8007114:	e004      	b.n	8007120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4904      	ldr	r1, [pc, #16]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800711a:	4805      	ldr	r0, [pc, #20]	; (8007130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800711c:	f7ff fd9c 	bl	8006c58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200014c0 	.word	0x200014c0
 8007130:	080078e4 	.word	0x080078e4

08007134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <Get_SerialNum+0x44>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007140:	4b0e      	ldr	r3, [pc, #56]	; (800717c <Get_SerialNum+0x48>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007146:	4b0e      	ldr	r3, [pc, #56]	; (8007180 <Get_SerialNum+0x4c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800715a:	2208      	movs	r2, #8
 800715c:	4909      	ldr	r1, [pc, #36]	; (8007184 <Get_SerialNum+0x50>)
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f814 	bl	800718c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007164:	2204      	movs	r2, #4
 8007166:	4908      	ldr	r1, [pc, #32]	; (8007188 <Get_SerialNum+0x54>)
 8007168:	68b8      	ldr	r0, [r7, #8]
 800716a:	f000 f80f 	bl	800718c <IntToUnicode>
  }
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	1fff7a10 	.word	0x1fff7a10
 800717c:	1fff7a14 	.word	0x1fff7a14
 8007180:	1fff7a18 	.word	0x1fff7a18
 8007184:	200000ee 	.word	0x200000ee
 8007188:	200000fe 	.word	0x200000fe

0800718c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
 80071a2:	e027      	b.n	80071f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0f1b      	lsrs	r3, r3, #28
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d80b      	bhi.n	80071c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0f1b      	lsrs	r3, r3, #28
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4619      	mov	r1, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	440b      	add	r3, r1
 80071bc:	3230      	adds	r2, #48	; 0x30
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	e00a      	b.n	80071da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	0f1b      	lsrs	r3, r3, #28
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	4619      	mov	r1, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	440b      	add	r3, r1
 80071d4:	3237      	adds	r2, #55	; 0x37
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	3301      	adds	r3, #1
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4413      	add	r3, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3301      	adds	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
 80071f4:	7dfa      	ldrb	r2, [r7, #23]
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3d3      	bcc.n	80071a4 <IntToUnicode+0x18>
  }
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722c:	d13a      	bne.n	80072a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	6313      	str	r3, [r2, #48]	; 0x30
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800724a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800724e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007250:	2302      	movs	r3, #2
 8007252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007254:	2300      	movs	r3, #0
 8007256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007258:	2303      	movs	r3, #3
 800725a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800725c:	230a      	movs	r3, #10
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4619      	mov	r1, r3
 8007266:	4812      	ldr	r0, [pc, #72]	; (80072b0 <HAL_PCD_MspInit+0xa4>)
 8007268:	f7f9 ff2c 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 800726e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007270:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	6353      	str	r3, [r2, #52]	; 0x34
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 800727e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007280:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 8007282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007286:	6453      	str	r3, [r2, #68]	; 0x44
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <HAL_PCD_MspInit+0xa0>)
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007294:	2200      	movs	r2, #0
 8007296:	2100      	movs	r1, #0
 8007298:	2043      	movs	r0, #67	; 0x43
 800729a:	f7f9 fedc 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800729e:	2043      	movs	r0, #67	; 0x43
 80072a0:	f7f9 fef5 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072a4:	bf00      	nop
 80072a6:	3728      	adds	r7, #40	; 0x28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40020000 	.word	0x40020000

080072b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f7fe fb65 	bl	800599a <USBD_LL_SetupStage>
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	4619      	mov	r1, r3
 8007302:	f7fe fb9f 	bl	8005a44 <USBD_LL_DataOutStage>
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	334c      	adds	r3, #76	; 0x4c
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	4619      	mov	r1, r3
 8007336:	f7fe fc38 	bl	8005baa <USBD_LL_DataInStage>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fd6c 	bl	8005e2e <USBD_LL_SOF>
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d001      	beq.n	8007376 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007372:	f7f9 fbc5 	bl	8000b00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800737c:	7bfa      	ldrb	r2, [r7, #15]
 800737e:	4611      	mov	r1, r2
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fd16 	bl	8005db2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fcbe 	bl	8005d0e <USBD_LL_Reset>
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fd11 	bl	8005dd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <HAL_PCD_SuspendCallback+0x48>)
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	4a03      	ldr	r2, [pc, #12]	; (80073e4 <HAL_PCD_SuspendCallback+0x48>)
 80073d6:	f043 0306 	orr.w	r3, r3, #6
 80073da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed00 	.word	0xe000ed00

080073e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fd01 	bl	8005dfe <USBD_LL_Resume>
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fd59 	bl	8005ed2 <USBD_LL_IsoOUTIncomplete>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fd15 	bl	8005e6e <USBD_LL_IsoINIncomplete>
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fd6b 	bl	8005f36 <USBD_LL_DevConnected>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fd68 	bl	8005f4c <USBD_LL_DevDisconnected>
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d13c      	bne.n	800750e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <USBD_LL_Init+0x94>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <USBD_LL_Init+0x94>)
 80074a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074a4:	4b1c      	ldr	r3, [pc, #112]	; (8007518 <USBD_LL_Init+0x94>)
 80074a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <USBD_LL_Init+0x94>)
 80074ae:	2204      	movs	r2, #4
 80074b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074b2:	4b19      	ldr	r3, [pc, #100]	; (8007518 <USBD_LL_Init+0x94>)
 80074b4:	2202      	movs	r2, #2
 80074b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <USBD_LL_Init+0x94>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074be:	4b16      	ldr	r3, [pc, #88]	; (8007518 <USBD_LL_Init+0x94>)
 80074c0:	2202      	movs	r2, #2
 80074c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <USBD_LL_Init+0x94>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <USBD_LL_Init+0x94>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <USBD_LL_Init+0x94>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <USBD_LL_Init+0x94>)
 80074d8:	2200      	movs	r2, #0
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <USBD_LL_Init+0x94>)
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074e2:	480d      	ldr	r0, [pc, #52]	; (8007518 <USBD_LL_Init+0x94>)
 80074e4:	f7f9 ff8b 	bl	80013fe <HAL_PCD_Init>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074ee:	f7f9 fb07 	bl	8000b00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	4808      	ldr	r0, [pc, #32]	; (8007518 <USBD_LL_Init+0x94>)
 80074f6:	f7fb f9e2 	bl	80028be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074fa:	2240      	movs	r2, #64	; 0x40
 80074fc:	2100      	movs	r1, #0
 80074fe:	4806      	ldr	r0, [pc, #24]	; (8007518 <USBD_LL_Init+0x94>)
 8007500:	f7fb f996 	bl	8002830 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	2101      	movs	r1, #1
 8007508:	4803      	ldr	r0, [pc, #12]	; (8007518 <USBD_LL_Init+0x94>)
 800750a:	f7fb f991 	bl	8002830 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200016c0 	.word	0x200016c0

0800751c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007532:	4618      	mov	r0, r3
 8007534:	f7fa f880 	bl	8001638 <HAL_PCD_Start>
 8007538:	4603      	mov	r3, r0
 800753a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f942 	bl	80077c8 <USBD_Get_USB_Status>
 8007544:	4603      	mov	r3, r0
 8007546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007548:	7bbb      	ldrb	r3, [r7, #14]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	461a      	mov	r2, r3
 8007560:	4603      	mov	r3, r0
 8007562:	70fb      	strb	r3, [r7, #3]
 8007564:	460b      	mov	r3, r1
 8007566:	70bb      	strb	r3, [r7, #2]
 8007568:	4613      	mov	r3, r2
 800756a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800757a:	78bb      	ldrb	r3, [r7, #2]
 800757c:	883a      	ldrh	r2, [r7, #0]
 800757e:	78f9      	ldrb	r1, [r7, #3]
 8007580:	f7fa fd51 	bl	8002026 <HAL_PCD_EP_Open>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f91c 	bl	80077c8 <USBD_Get_USB_Status>
 8007590:	4603      	mov	r3, r0
 8007592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007594:	7bbb      	ldrb	r3, [r7, #14]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fa fd9a 	bl	80020f6 <HAL_PCD_EP_Close>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f8fd 	bl	80077c8 <USBD_Get_USB_Status>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fa fe72 	bl	80022e4 <HAL_PCD_EP_SetStall>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f8de 	bl	80077c8 <USBD_Get_USB_Status>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007610:	7bbb      	ldrb	r3, [r7, #14]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fa feb7 	bl	80023ac <HAL_PCD_EP_ClrStall>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f8bf 	bl	80077c8 <USBD_Get_USB_Status>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800766a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800766c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007670:	2b00      	cmp	r3, #0
 8007672:	da0b      	bge.n	800768c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800767a:	68f9      	ldr	r1, [r7, #12]
 800767c:	4613      	mov	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	333e      	adds	r3, #62	; 0x3e
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	e00b      	b.n	80076a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007692:	68f9      	ldr	r1, [r7, #12]
 8007694:	4613      	mov	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80076a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa fc84 	bl	8001fdc <HAL_PCD_SetAddress>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f874 	bl	80077c8 <USBD_Get_USB_Status>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	460b      	mov	r3, r1
 80076fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800770c:	7af9      	ldrb	r1, [r7, #11]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	f7fa fd9d 	bl	8002250 <HAL_PCD_EP_Transmit>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 f853 	bl	80077c8 <USBD_Get_USB_Status>
 8007722:	4603      	mov	r3, r0
 8007724:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007726:	7dbb      	ldrb	r3, [r7, #22]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	460b      	mov	r3, r1
 800773e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800774e:	7af9      	ldrb	r1, [r7, #11]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	f7fa fd19 	bl	800218a <HAL_PCD_EP_Receive>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 f832 	bl	80077c8 <USBD_Get_USB_Status>
 8007764:	4603      	mov	r3, r0
 8007766:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007768:	7dbb      	ldrb	r3, [r7, #22]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f7fa fd49 	bl	8002220 <HAL_PCD_EP_GetRxCount>
 800778e:	4603      	mov	r3, r0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077a0:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_static_malloc+0x18>)
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20001bcc 	.word	0x20001bcc

080077b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d817      	bhi.n	800780c <USBD_Get_USB_Status+0x44>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <USBD_Get_USB_Status+0x1c>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	080077fb 	.word	0x080077fb
 80077ec:	08007801 	.word	0x08007801
 80077f0:	08007807 	.word	0x08007807
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
    break;
 80077f8:	e00b      	b.n	8007812 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	73fb      	strb	r3, [r7, #15]
    break;
 80077fe:	e008      	b.n	8007812 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
    break;
 8007804:	e005      	b.n	8007812 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007806:	2303      	movs	r3, #3
 8007808:	73fb      	strb	r3, [r7, #15]
    break;
 800780a:	e002      	b.n	8007812 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	bf00      	nop
  }
  return usb_status;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <__libc_init_array>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4d0d      	ldr	r5, [pc, #52]	; (8007858 <__libc_init_array+0x38>)
 8007824:	4c0d      	ldr	r4, [pc, #52]	; (800785c <__libc_init_array+0x3c>)
 8007826:	1b64      	subs	r4, r4, r5
 8007828:	10a4      	asrs	r4, r4, #2
 800782a:	2600      	movs	r6, #0
 800782c:	42a6      	cmp	r6, r4
 800782e:	d109      	bne.n	8007844 <__libc_init_array+0x24>
 8007830:	4d0b      	ldr	r5, [pc, #44]	; (8007860 <__libc_init_array+0x40>)
 8007832:	4c0c      	ldr	r4, [pc, #48]	; (8007864 <__libc_init_array+0x44>)
 8007834:	f000 f82e 	bl	8007894 <_init>
 8007838:	1b64      	subs	r4, r4, r5
 800783a:	10a4      	asrs	r4, r4, #2
 800783c:	2600      	movs	r6, #0
 800783e:	42a6      	cmp	r6, r4
 8007840:	d105      	bne.n	800784e <__libc_init_array+0x2e>
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	f855 3b04 	ldr.w	r3, [r5], #4
 8007848:	4798      	blx	r3
 800784a:	3601      	adds	r6, #1
 800784c:	e7ee      	b.n	800782c <__libc_init_array+0xc>
 800784e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007852:	4798      	blx	r3
 8007854:	3601      	adds	r6, #1
 8007856:	e7f2      	b.n	800783e <__libc_init_array+0x1e>
 8007858:	0800790c 	.word	0x0800790c
 800785c:	0800790c 	.word	0x0800790c
 8007860:	0800790c 	.word	0x0800790c
 8007864:	08007910 	.word	0x08007910

08007868 <memcpy>:
 8007868:	440a      	add	r2, r1
 800786a:	4291      	cmp	r1, r2
 800786c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007870:	d100      	bne.n	8007874 <memcpy+0xc>
 8007872:	4770      	bx	lr
 8007874:	b510      	push	{r4, lr}
 8007876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800787a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787e:	4291      	cmp	r1, r2
 8007880:	d1f9      	bne.n	8007876 <memcpy+0xe>
 8007882:	bd10      	pop	{r4, pc}

08007884 <memset>:
 8007884:	4402      	add	r2, r0
 8007886:	4603      	mov	r3, r0
 8007888:	4293      	cmp	r3, r2
 800788a:	d100      	bne.n	800788e <memset+0xa>
 800788c:	4770      	bx	lr
 800788e:	f803 1b01 	strb.w	r1, [r3], #1
 8007892:	e7f9      	b.n	8007888 <memset+0x4>

08007894 <_init>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	bf00      	nop
 8007898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789a:	bc08      	pop	{r3}
 800789c:	469e      	mov	lr, r3
 800789e:	4770      	bx	lr

080078a0 <_fini>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr
