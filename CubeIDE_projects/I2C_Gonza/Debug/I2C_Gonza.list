
I2C_Gonza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001bb0  08001bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd8  08001bd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd8  08001bd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd8  08001bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd8  08001bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bdc  08001bdc  00011bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001bec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001bec  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062d9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d8  00000000  00000000  0002630e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  000274e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159cb  00000000  00000000  00028188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008062  00000000  00000000  0003db53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bf15  00000000  00000000  00045bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1aca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f4  00000000  00000000  000c1b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b98 	.word	0x08001b98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b98 	.word	0x08001b98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f98f 	bl	8000474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f825 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f88d 	bl	8000278 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f85d 	bl	800021c <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin );
 8000162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000166:	480c      	ldr	r0, [pc, #48]	; (8000198 <main+0x4c>)
 8000168:	f000 fc80 	bl	8000a6c <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800016c:	20c8      	movs	r0, #200	; 0xc8
 800016e:	f000 f9e3 	bl	8000538 <HAL_Delay>

	  //HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	  uint16_t DevAddress = 0xE6;// o 0x73<<1; Shifted to the left before executing
 8000172:	23e6      	movs	r3, #230	; 0xe6
 8000174:	81fb      	strh	r3, [r7, #14]
	//  uint16_t MemAddress;
	//  uint16_t MemAddSize;
	  uint8_t *pData = 0x30ffff;
 8000176:	4b09      	ldr	r3, [pc, #36]	; (800019c <main+0x50>)
 8000178:	60bb      	str	r3, [r7, #8]
	  uint16_t Size = sizeof *pData;
 800017a:	2301      	movs	r3, #1
 800017c:	80fb      	strh	r3, [r7, #6]
	  uint32_t Timeout = 5;
 800017e:	2305      	movs	r3, #5
 8000180:	603b      	str	r3, [r7, #0]
	  // Primeros 2 bytes: Address + el bit de W = 0. 0xE6 = 1110011(0) (global address)
	  // 2: primeros 4 bits son el comando de escribir , lo demas se ignora
	  //

	  //HAL_I2C_Mem_Write(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	  HAL_I2C_Master_Transmit(&hi2c1, DevAddress, pData, Size, Timeout);
 8000182:	88fa      	ldrh	r2, [r7, #6]
 8000184:	89f9      	ldrh	r1, [r7, #14]
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	9300      	str	r3, [sp, #0]
 800018a:	4613      	mov	r3, r2
 800018c:	68ba      	ldr	r2, [r7, #8]
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <main+0x54>)
 8000190:	f000 fdca 	bl	8000d28 <HAL_I2C_Master_Transmit>
  {
 8000194:	e7e5      	b.n	8000162 <main+0x16>
 8000196:	bf00      	nop
 8000198:	40010c00 	.word	0x40010c00
 800019c:	0030ffff 	.word	0x0030ffff
 80001a0:	20000028 	.word	0x20000028

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fce8 	bl	8001b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 f8aa 	bl	8001334 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 f87b 	bl	80002e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fb16 	bl	8001834 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 f867 	bl	80002e0 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <MX_I2C1_Init+0x50>)
 8000222:	4a13      	ldr	r2, [pc, #76]	; (8000270 <MX_I2C1_Init+0x54>)
 8000224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <MX_I2C1_Init+0x50>)
 8000228:	4a12      	ldr	r2, [pc, #72]	; (8000274 <MX_I2C1_Init+0x58>)
 800022a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_I2C1_Init+0x50>)
 800023a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MX_I2C1_Init+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_I2C1_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <MX_I2C1_Init+0x50>)
 800025a:	f000 fc21 	bl	8000aa0 <HAL_I2C_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000264:	f000 f83c 	bl	80002e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000028 	.word	0x20000028
 8000270:	40005400 	.word	0x40005400
 8000274:	000186a0 	.word	0x000186a0

08000278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <MX_GPIO_Init+0x60>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <MX_GPIO_Init+0x60>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <MX_GPIO_Init+0x60>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0308 	and.w	r3, r3, #8
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002aa:	480c      	ldr	r0, [pc, #48]	; (80002dc <MX_GPIO_Init+0x64>)
 80002ac:	f000 fbc6 	bl	8000a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002be:	2302      	movs	r3, #2
 80002c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_GPIO_Init+0x64>)
 80002ca:	f000 fa3d 	bl	8000748 <HAL_GPIO_Init>

}
 80002ce:	bf00      	nop
 80002d0:	3718      	adds	r7, #24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e4:	b672      	cpsid	i
}
 80002e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <Error_Handler+0x8>
	...

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <HAL_MspInit+0x5c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_MspInit+0x5c>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_MspInit+0x60>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_MspInit+0x60>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <HAL_I2C_MspInit+0x70>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d123      	bne.n	80003b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000388:	23c0      	movs	r3, #192	; 0xc0
 800038a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800038c:	2312      	movs	r3, #18
 800038e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	480b      	ldr	r0, [pc, #44]	; (80003c8 <HAL_I2C_MspInit+0x78>)
 800039c:	f000 f9d4 	bl	8000748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 80003a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003aa:	61d3      	str	r3, [r2, #28]
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_I2C_MspInit+0x74>)
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40005400 	.word	0x40005400
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010c00 	.word	0x40010c00

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f875 	bl	8000500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}

0800041a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
	...

08000428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f7ff ffe4 	bl	800041a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f001 fb75 	bl	8001b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff fe79 	bl	800014c <main>
  bx lr
 800045a:	4770      	bx	lr
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000464:	08001be0 	.word	0x08001be0
  ldr r2, =_sbss
 8000468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800046c:	20000080 	.word	0x20000080

08000470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_2_IRQHandler>
	...

08000474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_Init+0x28>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <HAL_Init+0x28>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000484:	2003      	movs	r0, #3
 8000486:	f000 f92b 	bl	80006e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800048a:	200f      	movs	r0, #15
 800048c:	f000 f808 	bl	80004a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000490:	f7ff ff2c 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_InitTick+0x54>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_InitTick+0x58>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f935 	bl	800072e <HAL_SYSTICK_Config>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
 80004cc:	e00e      	b.n	80004ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d80a      	bhi.n	80004ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f000 f90b 	bl	80006f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <HAL_InitTick+0x5c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	e000      	b.n	80004ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ea:	2301      	movs	r3, #1
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000000 	.word	0x20000000
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000004 	.word	0x20000004

08000500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_IncTick+0x1c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_IncTick+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <HAL_IncTick+0x20>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000008 	.word	0x20000008
 8000520:	2000007c 	.word	0x2000007c

08000524 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  return uwTick;
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <HAL_GetTick+0x10>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	2000007c 	.word	0x2000007c

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000540:	f7ff fff0 	bl	8000524 <HAL_GetTick>
 8000544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000550:	d005      	beq.n	800055e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_Delay+0x44>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800055e:	bf00      	nop
 8000560:	f7ff ffe0 	bl	8000524 <HAL_GetTick>
 8000564:	4602      	mov	r2, r0
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	429a      	cmp	r2, r3
 800056e:	d8f7      	bhi.n	8000560 <HAL_Delay+0x28>
  {
  }
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	; 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006ac:	d301      	bcc.n	80006b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00f      	b.n	80006d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <SysTick_Config+0x40>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ba:	210f      	movs	r1, #15
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f7ff ff90 	bl	80005e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <SysTick_Config+0x40>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SysTick_Config+0x40>)
 80006cc:	2207      	movs	r2, #7
 80006ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff49 	bl	8000580 <__NVIC_SetPriorityGrouping>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000708:	f7ff ff5e 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 800070c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	68b9      	ldr	r1, [r7, #8]
 8000712:	6978      	ldr	r0, [r7, #20]
 8000714:	f7ff ff90 	bl	8000638 <NVIC_EncodePriority>
 8000718:	4602      	mov	r2, r0
 800071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff5f 	bl	80005e4 <__NVIC_SetPriority>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ffb0 	bl	800069c <SysTick_Config>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000748:	b480      	push	{r7}
 800074a:	b08b      	sub	sp, #44	; 0x2c
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075a:	e148      	b.n	80009ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800075c:	2201      	movs	r2, #1
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	69fa      	ldr	r2, [r7, #28]
 800076c:	4013      	ands	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	429a      	cmp	r2, r3
 8000776:	f040 8137 	bne.w	80009e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4aa3      	ldr	r2, [pc, #652]	; (8000a0c <HAL_GPIO_Init+0x2c4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d05e      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 8000784:	4aa1      	ldr	r2, [pc, #644]	; (8000a0c <HAL_GPIO_Init+0x2c4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d875      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 800078a:	4aa1      	ldr	r2, [pc, #644]	; (8000a10 <HAL_GPIO_Init+0x2c8>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d058      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 8000790:	4a9f      	ldr	r2, [pc, #636]	; (8000a10 <HAL_GPIO_Init+0x2c8>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d86f      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 8000796:	4a9f      	ldr	r2, [pc, #636]	; (8000a14 <HAL_GPIO_Init+0x2cc>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d052      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 800079c:	4a9d      	ldr	r2, [pc, #628]	; (8000a14 <HAL_GPIO_Init+0x2cc>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d869      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007a2:	4a9d      	ldr	r2, [pc, #628]	; (8000a18 <HAL_GPIO_Init+0x2d0>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d04c      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 80007a8:	4a9b      	ldr	r2, [pc, #620]	; (8000a18 <HAL_GPIO_Init+0x2d0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d863      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007ae:	4a9b      	ldr	r2, [pc, #620]	; (8000a1c <HAL_GPIO_Init+0x2d4>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d046      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
 80007b4:	4a99      	ldr	r2, [pc, #612]	; (8000a1c <HAL_GPIO_Init+0x2d4>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d85d      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007ba:	2b12      	cmp	r3, #18
 80007bc:	d82a      	bhi.n	8000814 <HAL_GPIO_Init+0xcc>
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d859      	bhi.n	8000876 <HAL_GPIO_Init+0x12e>
 80007c2:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <HAL_GPIO_Init+0x80>)
 80007c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c8:	08000843 	.word	0x08000843
 80007cc:	0800081d 	.word	0x0800081d
 80007d0:	0800082f 	.word	0x0800082f
 80007d4:	08000871 	.word	0x08000871
 80007d8:	08000877 	.word	0x08000877
 80007dc:	08000877 	.word	0x08000877
 80007e0:	08000877 	.word	0x08000877
 80007e4:	08000877 	.word	0x08000877
 80007e8:	08000877 	.word	0x08000877
 80007ec:	08000877 	.word	0x08000877
 80007f0:	08000877 	.word	0x08000877
 80007f4:	08000877 	.word	0x08000877
 80007f8:	08000877 	.word	0x08000877
 80007fc:	08000877 	.word	0x08000877
 8000800:	08000877 	.word	0x08000877
 8000804:	08000877 	.word	0x08000877
 8000808:	08000877 	.word	0x08000877
 800080c:	08000825 	.word	0x08000825
 8000810:	08000839 	.word	0x08000839
 8000814:	4a82      	ldr	r2, [pc, #520]	; (8000a20 <HAL_GPIO_Init+0x2d8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d013      	beq.n	8000842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800081a:	e02c      	b.n	8000876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	623b      	str	r3, [r7, #32]
          break;
 8000822:	e029      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	3304      	adds	r3, #4
 800082a:	623b      	str	r3, [r7, #32]
          break;
 800082c:	e024      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	3308      	adds	r3, #8
 8000834:	623b      	str	r3, [r7, #32]
          break;
 8000836:	e01f      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	330c      	adds	r3, #12
 800083e:	623b      	str	r3, [r7, #32]
          break;
 8000840:	e01a      	b.n	8000878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d102      	bne.n	8000850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800084a:	2304      	movs	r3, #4
 800084c:	623b      	str	r3, [r7, #32]
          break;
 800084e:	e013      	b.n	8000878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000858:	2308      	movs	r3, #8
 800085a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	611a      	str	r2, [r3, #16]
          break;
 8000862:	e009      	b.n	8000878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000864:	2308      	movs	r3, #8
 8000866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	615a      	str	r2, [r3, #20]
          break;
 800086e:	e003      	b.n	8000878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e000      	b.n	8000878 <HAL_GPIO_Init+0x130>
          break;
 8000876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2bff      	cmp	r3, #255	; 0xff
 800087c:	d801      	bhi.n	8000882 <HAL_GPIO_Init+0x13a>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	e001      	b.n	8000886 <HAL_GPIO_Init+0x13e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3304      	adds	r3, #4
 8000886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	d802      	bhi.n	8000894 <HAL_GPIO_Init+0x14c>
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	e002      	b.n	800089a <HAL_GPIO_Init+0x152>
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	3b08      	subs	r3, #8
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	210f      	movs	r1, #15
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	6a39      	ldr	r1, [r7, #32]
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	431a      	orrs	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 8090 	beq.w	80009e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008c8:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <HAL_GPIO_Init+0x2dc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a55      	ldr	r2, [pc, #340]	; (8000a24 <HAL_GPIO_Init+0x2dc>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <HAL_GPIO_Init+0x2dc>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008e0:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	220f      	movs	r2, #15
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a49      	ldr	r2, [pc, #292]	; (8000a2c <HAL_GPIO_Init+0x2e4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d00d      	beq.n	8000928 <HAL_GPIO_Init+0x1e0>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <HAL_GPIO_Init+0x2e8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d007      	beq.n	8000924 <HAL_GPIO_Init+0x1dc>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a47      	ldr	r2, [pc, #284]	; (8000a34 <HAL_GPIO_Init+0x2ec>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d101      	bne.n	8000920 <HAL_GPIO_Init+0x1d8>
 800091c:	2302      	movs	r3, #2
 800091e:	e004      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000920:	2303      	movs	r3, #3
 8000922:	e002      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000928:	2300      	movs	r3, #0
 800092a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092c:	f002 0203 	and.w	r2, r2, #3
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	4093      	lsls	r3, r2
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	4313      	orrs	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800093a:	493b      	ldr	r1, [pc, #236]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3302      	adds	r3, #2
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4937      	ldr	r1, [pc, #220]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4313      	orrs	r3, r2
 800095e:	600b      	str	r3, [r1, #0]
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	43db      	mvns	r3, r3
 800096a:	4933      	ldr	r1, [pc, #204]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 800096c:	4013      	ands	r3, r2
 800096e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	492d      	ldr	r1, [pc, #180]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	4313      	orrs	r3, r2
 8000986:	604b      	str	r3, [r1, #4]
 8000988:	e006      	b.n	8000998 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	43db      	mvns	r3, r3
 8000992:	4929      	ldr	r1, [pc, #164]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 8000994:	4013      	ands	r3, r2
 8000996:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	4923      	ldr	r1, [pc, #140]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	608b      	str	r3, [r1, #8]
 80009b0:	e006      	b.n	80009c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	491f      	ldr	r1, [pc, #124]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009bc:	4013      	ands	r3, r2
 80009be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d006      	beq.n	80009da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	4919      	ldr	r1, [pc, #100]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60cb      	str	r3, [r1, #12]
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4915      	ldr	r1, [pc, #84]	; (8000a38 <HAL_GPIO_Init+0x2f0>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	3301      	adds	r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f47f aeaf 	bne.w	800075c <HAL_GPIO_Init+0x14>
  }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	372c      	adds	r7, #44	; 0x2c
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	10320000 	.word	0x10320000
 8000a10:	10310000 	.word	0x10310000
 8000a14:	10220000 	.word	0x10220000
 8000a18:	10210000 	.word	0x10210000
 8000a1c:	10120000 	.word	0x10120000
 8000a20:	10110000 	.word	0x10110000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40011000 	.word	0x40011000
 8000a38:	40010400 	.word	0x40010400

08000a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a4c:	787b      	ldrb	r3, [r7, #1]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a52:	887a      	ldrh	r2, [r7, #2]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a58:	e003      	b.n	8000a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	041a      	lsls	r2, r3, #16
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a7e:	887a      	ldrh	r2, [r7, #2]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4013      	ands	r3, r2
 8000a84:	041a      	lsls	r2, r3, #16
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43d9      	mvns	r1, r3
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	611a      	str	r2, [r3, #16]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
	...

08000aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e12b      	b.n	8000d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d106      	bne.n	8000acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fc42 	bl	8000350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2224      	movs	r2, #36	; 0x24
 8000ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0201 	bic.w	r2, r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b04:	f000 ffea 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8000b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a81      	ldr	r2, [pc, #516]	; (8000d14 <HAL_I2C_Init+0x274>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d807      	bhi.n	8000b24 <HAL_I2C_Init+0x84>
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4a80      	ldr	r2, [pc, #512]	; (8000d18 <HAL_I2C_Init+0x278>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	bf94      	ite	ls
 8000b1c:	2301      	movls	r3, #1
 8000b1e:	2300      	movhi	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	e006      	b.n	8000b32 <HAL_I2C_Init+0x92>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a7d      	ldr	r2, [pc, #500]	; (8000d1c <HAL_I2C_Init+0x27c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	bf94      	ite	ls
 8000b2c:	2301      	movls	r3, #1
 8000b2e:	2300      	movhi	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0e7      	b.n	8000d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4a78      	ldr	r2, [pc, #480]	; (8000d20 <HAL_I2C_Init+0x280>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9b      	lsrs	r3, r3, #18
 8000b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a6a      	ldr	r2, [pc, #424]	; (8000d14 <HAL_I2C_Init+0x274>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d802      	bhi.n	8000b74 <HAL_I2C_Init+0xd4>
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	e009      	b.n	8000b88 <HAL_I2C_Init+0xe8>
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	4a69      	ldr	r2, [pc, #420]	; (8000d24 <HAL_I2C_Init+0x284>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	099b      	lsrs	r3, r3, #6
 8000b86:	3301      	adds	r3, #1
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	495c      	ldr	r1, [pc, #368]	; (8000d14 <HAL_I2C_Init+0x274>)
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d819      	bhi.n	8000bdc <HAL_I2C_Init+0x13c>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	1e59      	subs	r1, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb6:	1c59      	adds	r1, r3, #1
 8000bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <HAL_I2C_Init+0x138>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1e59      	subs	r1, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd6:	e051      	b.n	8000c7c <HAL_I2C_Init+0x1dc>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e04f      	b.n	8000c7c <HAL_I2C_Init+0x1dc>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <HAL_I2C_Init+0x168>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1e58      	subs	r0, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6859      	ldr	r1, [r3, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	440b      	add	r3, r1
 8000bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	e012      	b.n	8000c2e <HAL_I2C_Init+0x18e>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	1e58      	subs	r0, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6859      	ldr	r1, [r3, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	0099      	lsls	r1, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c1e:	3301      	adds	r3, #1
 8000c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bf0c      	ite	eq
 8000c28:	2301      	moveq	r3, #1
 8000c2a:	2300      	movne	r3, #0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_Init+0x196>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e022      	b.n	8000c7c <HAL_I2C_Init+0x1dc>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10e      	bne.n	8000c5c <HAL_I2C_Init+0x1bc>
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	1e58      	subs	r0, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6859      	ldr	r1, [r3, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	440b      	add	r3, r1
 8000c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	e00f      	b.n	8000c7c <HAL_I2C_Init+0x1dc>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	1e58      	subs	r0, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6859      	ldr	r1, [r3, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	0099      	lsls	r1, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7c:	6879      	ldr	r1, [r7, #4]
 8000c7e:	6809      	ldr	r1, [r1, #0]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69da      	ldr	r2, [r3, #28]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a1b      	ldr	r3, [r3, #32]
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6911      	ldr	r1, [r2, #16]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68d2      	ldr	r2, [r2, #12]
 8000cb6:	4311      	orrs	r1, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	6812      	ldr	r2, [r2, #0]
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	000186a0 	.word	0x000186a0
 8000d18:	001e847f 	.word	0x001e847f
 8000d1c:	003d08ff 	.word	0x003d08ff
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	10624dd3 	.word	0x10624dd3

08000d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	461a      	mov	r2, r3
 8000d34:	460b      	mov	r3, r1
 8000d36:	817b      	strh	r3, [r7, #10]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff fbf2 	bl	8000524 <HAL_GetTick>
 8000d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b20      	cmp	r3, #32
 8000d4c:	f040 80e0 	bne.w	8000f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2319      	movs	r3, #25
 8000d56:	2201      	movs	r2, #1
 8000d58:	4970      	ldr	r1, [pc, #448]	; (8000f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f964 	bl	8001028 <I2C_WaitOnFlagUntilTimeout>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000d66:	2302      	movs	r3, #2
 8000d68:	e0d3      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <HAL_I2C_Master_Transmit+0x50>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e0cc      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d007      	beq.n	8000d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2221      	movs	r2, #33	; 0x21
 8000db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2210      	movs	r2, #16
 8000dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	893a      	ldrh	r2, [r7, #8]
 8000dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000de0:	8979      	ldrh	r1, [r7, #10]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	6a3a      	ldr	r2, [r7, #32]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f89c 	bl	8000f24 <I2C_MasterRequestWrite>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e08d      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e0c:	e066      	b.n	8000edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	6a39      	ldr	r1, [r7, #32]
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f000 f9de 	bl	80011d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00d      	beq.n	8000e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d107      	bne.n	8000e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e06b      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d11b      	bne.n	8000eb0 <HAL_I2C_Master_Transmit+0x188>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d017      	beq.n	8000eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	6a39      	ldr	r1, [r7, #32]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 f9ce 	bl	8001256 <I2C_WaitOnBTFFlagUntilTimeout>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00d      	beq.n	8000edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d107      	bne.n	8000ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e01a      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d194      	bne.n	8000e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e000      	b.n	8000f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f10:	2302      	movs	r3, #2
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	00100002 	.word	0x00100002
 8000f20:	ffff0000 	.word	0xffff0000

08000f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d006      	beq.n	8000f4e <I2C_MasterRequestWrite+0x2a>
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d003      	beq.n	8000f4e <I2C_MasterRequestWrite+0x2a>
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000f4c:	d108      	bne.n	8000f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e00b      	b.n	8000f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d107      	bne.n	8000f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 f84f 	bl	8001028 <I2C_WaitOnFlagUntilTimeout>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00d      	beq.n	8000fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f9e:	d103      	bne.n	8000fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e035      	b.n	8001018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fb4:	d108      	bne.n	8000fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	e01b      	b.n	8001000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	11db      	asrs	r3, r3, #7
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 0306 	and.w	r3, r3, #6
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f063 030f 	orn	r3, r3, #15
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <I2C_MasterRequestWrite+0xfc>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f875 	bl	80010d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e010      	b.n	8001018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000ff6:	897b      	ldrh	r3, [r7, #10]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <I2C_MasterRequestWrite+0x100>)
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 f865 	bl	80010d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	00010008 	.word	0x00010008
 8001024:	00010002 	.word	0x00010002

08001028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001038:	e025      	b.n	8001086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d021      	beq.n	8001086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001042:	f7ff fa6f 	bl	8000524 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d302      	bcc.n	8001058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d116      	bne.n	8001086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2220      	movs	r2, #32
 8001062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f043 0220 	orr.w	r2, r3, #32
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e023      	b.n	80010ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0c1b      	lsrs	r3, r3, #16
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10d      	bne.n	80010ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4013      	ands	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	e00c      	b.n	80010c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4013      	ands	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d0b6      	beq.n	800103a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010e4:	e051      	b.n	800118a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f4:	d123      	bne.n	800113e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800110e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2220      	movs	r2, #32
 800111a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f043 0204 	orr.w	r2, r3, #4
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e046      	b.n	80011cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d021      	beq.n	800118a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001146:	f7ff f9ed 	bl	8000524 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	d302      	bcc.n	800115c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d116      	bne.n	800118a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2220      	movs	r2, #32
 8001166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f043 0220 	orr.w	r2, r3, #32
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e020      	b.n	80011cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10c      	bne.n	80011ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4013      	ands	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf14      	ite	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	2300      	moveq	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	e00b      	b.n	80011c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	43da      	mvns	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	4013      	ands	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d18d      	bne.n	80010e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011e0:	e02d      	b.n	800123e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f878 	bl	80012d8 <I2C_IsAcknowledgeFailed>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e02d      	b.n	800124e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d021      	beq.n	800123e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011fa:	f7ff f993 	bl	8000524 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	429a      	cmp	r2, r3
 8001208:	d302      	bcc.n	8001210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d116      	bne.n	800123e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f043 0220 	orr.w	r2, r3, #32
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e007      	b.n	800124e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001248:	2b80      	cmp	r3, #128	; 0x80
 800124a:	d1ca      	bne.n	80011e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001262:	e02d      	b.n	80012c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f837 	bl	80012d8 <I2C_IsAcknowledgeFailed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e02d      	b.n	80012d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127a:	d021      	beq.n	80012c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127c:	f7ff f952 	bl	8000524 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	429a      	cmp	r2, r3
 800128a:	d302      	bcc.n	8001292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2220      	movs	r2, #32
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f043 0220 	orr.w	r2, r3, #32
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e007      	b.n	80012d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d1ca      	bne.n	8001264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ee:	d11b      	bne.n	8001328 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f043 0204 	orr.w	r2, r3, #4
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e26c      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 800136c:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e246      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7a      	ldr	r2, [pc, #488]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a71      	ldr	r2, [pc, #452]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff f888 	bl	8000524 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff f884 	bl	8000524 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1fa      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff f874 	bl	8000524 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff f870 	bl	8000524 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1e6      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1ba      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4939      	ldr	r1, [pc, #228]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff f829 	bl	8000524 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff f825 	bl	8000524 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e19b      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4927      	ldr	r1, [pc, #156]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff f808 	bl	8000524 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff f804 	bl	8000524 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e17a      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_RCC_OscConfig+0x274>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7fe ffe8 	bl	8000524 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7fe ffe4 	bl	8000524 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e15a      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fac4 	bl	8001b04 <RCC_Delay>
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7fe ffce 	bl	8000524 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00f      	b.n	80015ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7fe ffca 	bl	8000524 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e140      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	42420000 	.word	0x42420000
 80015a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b9e      	ldr	r3, [pc, #632]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e9      	bne.n	800158c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a6 	beq.w	8001712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b97      	ldr	r3, [pc, #604]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b94      	ldr	r3, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a93      	ldr	r2, [pc, #588]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b91      	ldr	r3, [pc, #580]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b8e      	ldr	r3, [pc, #568]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a8a      	ldr	r2, [pc, #552]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7fe ff8b 	bl	8000524 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7fe ff87 	bl	8000524 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0fd      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x334>
 800164e:	4b76      	ldr	r3, [pc, #472]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a75      	ldr	r2, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a72      	ldr	r2, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x356>
 8001670:	4b6d      	ldr	r3, [pc, #436]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a6c      	ldr	r2, [pc, #432]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a69      	ldr	r2, [pc, #420]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a66      	ldr	r2, [pc, #408]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b64      	ldr	r3, [pc, #400]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a63      	ldr	r2, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7fe ff3b 	bl	8000524 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7fe ff37 	bl	8000524 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0ab      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b57      	ldr	r3, [pc, #348]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7fe ff25 	bl	8000524 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7fe ff21 	bl	8000524 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e095      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8081 	beq.w	800181e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d061      	beq.n	80017ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d146      	bne.n	80017be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_OscConfig+0x4fc>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7fe fef5 	bl	8000524 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7fe fef1 	bl	8000524 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e067      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	492d      	ldr	r1, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a19      	ldr	r1, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	430b      	orrs	r3, r1
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_RCC_OscConfig+0x4fc>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7fe fec5 	bl	8000524 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7fe fec1 	bl	8000524 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e037      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x46a>
 80017bc:	e02f      	b.n	800181e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_RCC_OscConfig+0x4fc>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7fe feae 	bl	8000524 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7fe feaa 	bl	8000524 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e020      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x498>
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e013      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	429a      	cmp	r2, r3
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40007000 	.word	0x40007000
 8001830:	42420060 	.word	0x42420060

08001834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0d0      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d910      	bls.n	8001878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 0207 	bic.w	r2, r3, #7
 800185e:	4965      	ldr	r1, [pc, #404]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0b8      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800189a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	494d      	ldr	r1, [pc, #308]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d040      	beq.n	8001954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07f      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e073      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06b      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f023 0203 	bic.w	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4936      	ldr	r1, [pc, #216]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001924:	f7fe fdfe 	bl	8000524 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	e00a      	b.n	8001942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7fe fdfa 	bl	8000524 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e053      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 020c 	and.w	r2, r3, #12
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d1eb      	bne.n	800192c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d210      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4922      	ldr	r1, [pc, #136]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e032      	b.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4916      	ldr	r1, [pc, #88]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c2:	f000 f821 	bl	8001a08 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	490a      	ldr	r1, [pc, #40]	; (80019fc <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1cc>)
 80019dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1d0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd5c 	bl	80004a0 <HAL_InitTick>

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	08001bc0 	.word	0x08001bc0
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a08:	b490      	push	{r4, r7}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a10:	1d3c      	adds	r4, r7, #4
 8001a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a18:	f240 2301 	movw	r3, #513	; 0x201
 8001a1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x40>
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x46>
 8001a46:	e02d      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4a:	623b      	str	r3, [r7, #32]
      break;
 8001a4c:	e02d      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	0c5b      	lsrs	r3, r3, #17
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a86:	fb02 f203 	mul.w	r2, r2, r3
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
 8001a92:	e004      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	623b      	str	r3, [r7, #32]
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	623b      	str	r3, [r7, #32]
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc90      	pop	{r4, r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	08001bb0 	.word	0x08001bb0
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	007a1200 	.word	0x007a1200
 8001ac4:	003d0900 	.word	0x003d0900

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff2 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	08001bd0 	.word	0x08001bd0

08001b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <RCC_Delay+0x34>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <RCC_Delay+0x38>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0a5b      	lsrs	r3, r3, #9
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b20:	bf00      	nop
  }
  while (Delay --);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e5a      	subs	r2, r3, #1
 8001b26:	60fa      	str	r2, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <RCC_Delay+0x1c>
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	10624dd3 	.word	0x10624dd3

08001b40 <__libc_init_array>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	2600      	movs	r6, #0
 8001b44:	4d0c      	ldr	r5, [pc, #48]	; (8001b78 <__libc_init_array+0x38>)
 8001b46:	4c0d      	ldr	r4, [pc, #52]	; (8001b7c <__libc_init_array+0x3c>)
 8001b48:	1b64      	subs	r4, r4, r5
 8001b4a:	10a4      	asrs	r4, r4, #2
 8001b4c:	42a6      	cmp	r6, r4
 8001b4e:	d109      	bne.n	8001b64 <__libc_init_array+0x24>
 8001b50:	f000 f822 	bl	8001b98 <_init>
 8001b54:	2600      	movs	r6, #0
 8001b56:	4d0a      	ldr	r5, [pc, #40]	; (8001b80 <__libc_init_array+0x40>)
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <__libc_init_array+0x44>)
 8001b5a:	1b64      	subs	r4, r4, r5
 8001b5c:	10a4      	asrs	r4, r4, #2
 8001b5e:	42a6      	cmp	r6, r4
 8001b60:	d105      	bne.n	8001b6e <__libc_init_array+0x2e>
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
 8001b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b68:	4798      	blx	r3
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	e7ee      	b.n	8001b4c <__libc_init_array+0xc>
 8001b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b72:	4798      	blx	r3
 8001b74:	3601      	adds	r6, #1
 8001b76:	e7f2      	b.n	8001b5e <__libc_init_array+0x1e>
 8001b78:	08001bd8 	.word	0x08001bd8
 8001b7c:	08001bd8 	.word	0x08001bd8
 8001b80:	08001bd8 	.word	0x08001bd8
 8001b84:	08001bdc 	.word	0x08001bdc

08001b88 <memset>:
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4402      	add	r2, r0
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <memset+0xa>
 8001b90:	4770      	bx	lr
 8001b92:	f803 1b01 	strb.w	r1, [r3], #1
 8001b96:	e7f9      	b.n	8001b8c <memset+0x4>

08001b98 <_init>:
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	bf00      	nop
 8001b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9e:	bc08      	pop	{r3}
 8001ba0:	469e      	mov	lr, r3
 8001ba2:	4770      	bx	lr

08001ba4 <_fini>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	bf00      	nop
 8001ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001baa:	bc08      	pop	{r3}
 8001bac:	469e      	mov	lr, r3
 8001bae:	4770      	bx	lr
